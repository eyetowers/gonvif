// Code generated by gowsdl DO NOT EDIT.

package wsdl

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"

	tt "github.com/eyetowers/gonvif/pkg/generated/onvif/www_onvif_org/ver10/schema"
)

// against "unused imports"
var _ time.Time
var _ xml.Name
var _ context.Context
var _ soap.SOAPEnvelope

type ConfigurationEnumeration string

const (
	ConfigurationEnumerationAll ConfigurationEnumeration = "All"

	ConfigurationEnumerationVideoSource ConfigurationEnumeration = "VideoSource"

	ConfigurationEnumerationVideoEncoder ConfigurationEnumeration = "VideoEncoder"

	ConfigurationEnumerationAudioSource ConfigurationEnumeration = "AudioSource"

	ConfigurationEnumerationAudioEncoder ConfigurationEnumeration = "AudioEncoder"

	ConfigurationEnumerationAudioOutput ConfigurationEnumeration = "AudioOutput"

	ConfigurationEnumerationAudioDecoder ConfigurationEnumeration = "AudioDecoder"

	ConfigurationEnumerationMetadata ConfigurationEnumeration = "Metadata"

	ConfigurationEnumerationAnalytics ConfigurationEnumeration = "Analytics"

	ConfigurationEnumerationPTZ ConfigurationEnumeration = "PTZ"

	ConfigurationEnumerationReceiver ConfigurationEnumeration = "Receiver"
)

type TransportProtocol string

const (
	TransportProtocolRtspUnicast TransportProtocol = "RtspUnicast"

	TransportProtocolRtspMulticast TransportProtocol = "RtspMulticast"

	TransportProtocolRTSP TransportProtocol = "RTSP"

	TransportProtocolRtspOverHttp TransportProtocol = "RtspOverHttp"
)

type MaskType string

const (
	MaskTypeColor MaskType = "Color"

	MaskTypePixelated MaskType = "Pixelated"

	MaskTypeBlurred MaskType = "Blurred"
)

type GetServiceCapabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetServiceCapabilities" json:"-"`
}

type GetServiceCapabilitiesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetServiceCapabilitiesResponse" json:"-"`

	// The capabilities for the media service is returned in the Capabilities element.
	Capabilities *Capabilities2 `xml:"Capabilities,omitempty" json:"Capabilities,omitempty"`
}

type CreateProfile struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl CreateProfile" json:"-"`

	// friendly name of the profile to be created
	Name *tt.Name `xml:"Name,omitempty" json:"Name,omitempty"`

	// Optional set of configurations to be assigned to the profile. List entries with tr2:ConfigurationEnumeration value "All" shall be ignored.
	Configuration []*ConfigurationRef `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type CreateProfileResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl CreateProfileResponse" json:"-"`

	// Token assigned by the device for the newly created profile.
	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`
}

type GetProfiles struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetProfiles" json:"-"`

	// Optional token of the requested profile.
	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`

	// The types shall be provided as defined by tr2:ConfigurationEnumeration.
	Type []string `xml:"Type,omitempty" json:"Type,omitempty"`
}

type GetProfilesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetProfilesResponse" json:"-"`

	// Lists all profiles that exist in the media service. The response provides the requested types of Configurations as far as available.
	// If a profile doesn't contain a type no error shall be provided.
	Profiles []*MediaProfile `xml:"Profiles,omitempty" json:"Profiles,omitempty"`
}

type AddConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl AddConfiguration" json:"-"`

	// Reference to the profile where the configuration should be added
	ProfileToken *tt.ReferenceToken `xml:"ProfileToken,omitempty" json:"ProfileToken,omitempty"`

	// Optional item. If present updates the Name property of the profile.
	Name *tt.Name `xml:"Name,omitempty" json:"Name,omitempty"`

	//
	// List of configurations to be added. The types shall be provided in the order defined by tr2:ConfigurationEnumeration. List entries with tr2:ConfigurationEnumeration value "All" shall be ignored.
	//
	Configuration []*ConfigurationRef `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type AddConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl AddConfigurationResponse" json:"-"`
}

type RemoveConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl RemoveConfiguration" json:"-"`

	// This element contains a  reference to the media profile from which the AudioDecoderConfiguration shall be removed.
	ProfileToken *tt.ReferenceToken `xml:"ProfileToken,omitempty" json:"ProfileToken,omitempty"`

	// List of configurations to be removed. The types shall be provided in the order defined by tr2:ConfigurationEnumeration. Tokens appearing in the configuration list shall be ignored. Presence of the "All" type shall result in an empty profile.
	Configuration []*ConfigurationRef `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type RemoveConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl RemoveConfigurationResponse" json:"-"`
}

type DeleteProfile struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl DeleteProfile" json:"-"`

	// This element contains a  reference to the profile that should be deleted.
	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`
}

type DeleteProfileResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl DeleteProfileResponse" json:"-"`
}

type GetVideoEncoderConfigurations GetConfiguration

type GetVideoEncoderConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetVideoEncoderConfigurationsResponse" json:"-"`

	// This element contains a list of video encoder configurations.
	Configurations []*tt.VideoEncoder2Configuration `xml:"Configurations,omitempty" json:"Configurations,omitempty"`
}

type GetVideoSourceConfigurations GetConfiguration

type GetVideoSourceConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetVideoSourceConfigurationsResponse" json:"-"`

	// This element contains a list of video source configurations.
	Configurations []*tt.VideoSourceConfiguration `xml:"Configurations,omitempty" json:"Configurations,omitempty"`
}

type GetAudioEncoderConfigurations GetConfiguration

type GetAudioEncoderConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetAudioEncoderConfigurationsResponse" json:"-"`

	// This element contains a list of audio encoder configurations.
	Configurations []*tt.AudioEncoder2Configuration `xml:"Configurations,omitempty" json:"Configurations,omitempty"`
}

type GetAudioSourceConfigurations GetConfiguration

type GetAudioSourceConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetAudioSourceConfigurationsResponse" json:"-"`

	// This element contains a list of audio source configurations.
	Configurations []*tt.AudioSourceConfiguration `xml:"Configurations,omitempty" json:"Configurations,omitempty"`
}

type GetAnalyticsConfigurations GetConfiguration

type GetAnalyticsConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetAnalyticsConfigurationsResponse" json:"-"`

	// This element contains a list of Analytics configurations.
	Configurations []*tt.VideoAnalyticsConfiguration `xml:"Configurations,omitempty" json:"Configurations,omitempty"`
}

type GetMetadataConfigurations GetConfiguration

type GetMetadataConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetMetadataConfigurationsResponse" json:"-"`

	// This element contains a list of metadata configurations
	Configurations []*tt.MetadataConfiguration `xml:"Configurations,omitempty" json:"Configurations,omitempty"`
}

type GetAudioOutputConfigurations GetConfiguration

type GetAudioOutputConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetAudioOutputConfigurationsResponse" json:"-"`

	// This element contains a list of audio output configurations
	Configurations []*tt.AudioOutputConfiguration `xml:"Configurations,omitempty" json:"Configurations,omitempty"`
}

type GetAudioDecoderConfigurations GetConfiguration

type GetAudioDecoderConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetAudioDecoderConfigurationsResponse" json:"-"`

	// This element contains a list of audio decoder configurations
	Configurations []*tt.AudioDecoderConfiguration `xml:"Configurations,omitempty" json:"Configurations,omitempty"`
}

type SetVideoEncoderConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetVideoEncoderConfiguration" json:"-"`

	// Contains the modified video encoder configuration. The configuration shall exist in the device.
	Configuration *tt.VideoEncoder2Configuration `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type SetVideoEncoderConfigurationResponse SetConfigurationResponse

type SetVideoSourceConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetVideoSourceConfiguration" json:"-"`

	// Contains the modified video source configuration. The configuration shall exist in the device.
	Configuration *tt.VideoSourceConfiguration `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type SetVideoSourceConfigurationResponse SetConfigurationResponse

type SetAudioEncoderConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetAudioEncoderConfiguration" json:"-"`

	// Contains the modified audio encoder configuration. The configuration shall exist in the device.
	Configuration *tt.AudioEncoder2Configuration `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type SetAudioEncoderConfigurationResponse SetConfigurationResponse

type SetAudioSourceConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetAudioSourceConfiguration" json:"-"`

	// Contains the modified audio source configuration. The configuration shall exist in the device.
	Configuration *tt.AudioSourceConfiguration `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type SetAudioSourceConfigurationResponse SetConfigurationResponse

type SetMetadataConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetMetadataConfiguration" json:"-"`

	// Contains the modified metadata configuration. The configuration shall exist in the device.
	Configuration *tt.MetadataConfiguration `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type SetMetadataConfigurationResponse SetConfigurationResponse

type SetAudioOutputConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetAudioOutputConfiguration" json:"-"`

	// Contains the modified audio output configuration. The configuration shall exist in the device.
	Configuration *tt.AudioOutputConfiguration `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type SetAudioOutputConfigurationResponse SetConfigurationResponse

type SetAudioDecoderConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetAudioDecoderConfiguration" json:"-"`

	// Contains the modified audio decoder configuration. The configuration shall exist in the device.
	Configuration *tt.AudioDecoderConfiguration `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type SetAudioDecoderConfigurationResponse SetConfigurationResponse

type GetVideoSourceConfigurationOptions GetConfiguration

type GetVideoSourceConfigurationOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetVideoSourceConfigurationOptionsResponse" json:"-"`

	// This message contains the video source configuration options. If a video source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
	Options *tt.VideoSourceConfigurationOptions `xml:"Options,omitempty" json:"Options,omitempty"`
}

type GetVideoEncoderConfigurationOptions GetConfiguration

type GetVideoEncoderConfigurationOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetVideoEncoderConfigurationOptionsResponse" json:"-"`

	Options []*tt.VideoEncoder2ConfigurationOptions `xml:"Options,omitempty" json:"Options,omitempty"`
}

type GetAudioSourceConfigurationOptions GetConfiguration

type GetAudioSourceConfigurationOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetAudioSourceConfigurationOptionsResponse" json:"-"`

	// This message contains the audio source configuration options. If a audio source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
	Options *tt.AudioSourceConfigurationOptions `xml:"Options,omitempty" json:"Options,omitempty"`
}

type GetAudioEncoderConfigurationOptions GetConfiguration

type GetAudioEncoderConfigurationOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetAudioEncoderConfigurationOptionsResponse" json:"-"`

	// This message contains the audio encoder configuration options. If a audio encoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
	Options []*tt.AudioEncoder2ConfigurationOptions `xml:"Options,omitempty" json:"Options,omitempty"`
}

type GetMetadataConfigurationOptions GetConfiguration

type GetMetadataConfigurationOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetMetadataConfigurationOptionsResponse" json:"-"`

	// This message contains the metadata configuration options. If a metadata configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
	Options *tt.MetadataConfigurationOptions `xml:"Options,omitempty" json:"Options,omitempty"`
}

type GetAudioOutputConfigurationOptions GetConfiguration

type GetAudioOutputConfigurationOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetAudioOutputConfigurationOptionsResponse" json:"-"`

	// This message contains the audio output configuration options. If a audio output configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
	Options *tt.AudioOutputConfigurationOptions `xml:"Options,omitempty" json:"Options,omitempty"`
}

type GetAudioDecoderConfigurationOptions GetConfiguration

type GetAudioDecoderConfigurationOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetAudioDecoderConfigurationOptionsResponse" json:"-"`

	// This message contains the audio decoder configuration options. If a audio decoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
	Options []*tt.AudioEncoder2ConfigurationOptions `xml:"Options,omitempty" json:"Options,omitempty"`
}

type GetVideoEncoderInstances struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetVideoEncoderInstances" json:"-"`

	// Token of the video source configuration
	ConfigurationToken *tt.ReferenceToken `xml:"ConfigurationToken,omitempty" json:"ConfigurationToken,omitempty"`
}

type GetVideoEncoderInstancesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetVideoEncoderInstancesResponse" json:"-"`

	// The minimum guaranteed total number of encoder instances (applications) per VideoSourceConfiguration.
	Info *EncoderInstanceInfo `xml:"Info,omitempty" json:"Info,omitempty"`
}

type GetStreamUri struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetStreamUri" json:"-"`

	// Defines the network protocol for streaming as defined by tr2:TransportProtocol
	Protocol string `xml:"Protocol,omitempty" json:"Protocol,omitempty"`

	// The ProfileToken element indicates the media profile to use and will define the configuration of the content of the stream.
	ProfileToken *tt.ReferenceToken `xml:"ProfileToken,omitempty" json:"ProfileToken,omitempty"`
}

type GetStreamUriResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetStreamUriResponse" json:"-"`

	// Stable Uri to be used for requesting the media stream
	Uri string `xml:"Uri,omitempty" json:"Uri,omitempty"`
}

type SetSynchronizationPoint struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetSynchronizationPoint" json:"-"`

	// Contains a Profile reference for which a Synchronization Point is requested.
	ProfileToken *tt.ReferenceToken `xml:"ProfileToken,omitempty" json:"ProfileToken,omitempty"`
}

type SetSynchronizationPointResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetSynchronizationPointResponse" json:"-"`
}

type GetSnapshotUri struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetSnapshotUri" json:"-"`

	// The ProfileToken element indicates the media profile to use and will define the source and dimensions of the snapshot.
	ProfileToken *tt.ReferenceToken `xml:"ProfileToken,omitempty" json:"ProfileToken,omitempty"`
}

type GetSnapshotUriResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetSnapshotUriResponse" json:"-"`

	// Stable Uri to be used for requesting snapshot images.
	Uri string `xml:"Uri,omitempty" json:"Uri,omitempty"`
}

type StartMulticastStreaming StartStopMulticastStreaming

type StartMulticastStreamingResponse SetConfigurationResponse

type StopMulticastStreaming StartStopMulticastStreaming

type StopMulticastStreamingResponse SetConfigurationResponse

type GetVideoSourceModes struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetVideoSourceModes" json:"-"`

	// Contains a video source reference for which a video source mode is requested.
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`
}

type GetVideoSourceModesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetVideoSourceModesResponse" json:"-"`

	// Return the information for specified video source mode.
	VideoSourceModes []*VideoSourceMode `xml:"VideoSourceModes,omitempty" json:"VideoSourceModes,omitempty"`
}

type SetVideoSourceMode struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetVideoSourceMode" json:"-"`

	// Contains a video source reference for which a video source mode is requested.
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`

	// Indicate video source mode.
	VideoSourceModeToken *tt.ReferenceToken `xml:"VideoSourceModeToken,omitempty" json:"VideoSourceModeToken,omitempty"`
}

type SetVideoSourceModeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetVideoSourceModeResponse" json:"-"`

	// The response contains information about rebooting after returning response. When Reboot is set true, a device will reboot automatically after setting mode.
	Reboot bool `xml:"Reboot,omitempty" json:"Reboot,omitempty"`
}

type GetOSDs struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetOSDs" json:"-"`

	// The GetOSDs command fetches the OSD configuration if the OSD token is known.
	OSDToken *tt.ReferenceToken `xml:"OSDToken,omitempty" json:"OSDToken,omitempty"`

	// Token of the Video Source Configuration, which has OSDs associated with are requested. If token not exist, request all available OSDs.
	ConfigurationToken *tt.ReferenceToken `xml:"ConfigurationToken,omitempty" json:"ConfigurationToken,omitempty"`
}

type GetOSDsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetOSDsResponse" json:"-"`

	// This element contains a list of requested OSDs.
	OSDs []*tt.OSDConfiguration `xml:"OSDs,omitempty" json:"OSDs,omitempty"`
}

type SetOSD struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetOSD" json:"-"`

	// Contains the modified OSD configuration.
	OSD *tt.OSDConfiguration `xml:"OSD,omitempty" json:"OSD,omitempty"`
}

type SetOSDResponse SetConfigurationResponse

type GetOSDOptions struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetOSDOptions" json:"-"`

	// Video Source Configuration Token that specifies an existing video source configuration that the options shall be compatible with.
	ConfigurationToken *tt.ReferenceToken `xml:"ConfigurationToken,omitempty" json:"ConfigurationToken,omitempty"`
}

type GetOSDOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetOSDOptionsResponse" json:"-"`

	OSDOptions *tt.OSDConfigurationOptions `xml:"OSDOptions,omitempty" json:"OSDOptions,omitempty"`
}

type CreateOSD struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl CreateOSD" json:"-"`

	// Contain the initial OSD configuration for create.
	OSD *tt.OSDConfiguration `xml:"OSD,omitempty" json:"OSD,omitempty"`
}

type CreateOSDResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl CreateOSDResponse" json:"-"`

	// Returns Token of the newly created OSD
	OSDToken *tt.ReferenceToken `xml:"OSDToken,omitempty" json:"OSDToken,omitempty"`
}

type DeleteOSD struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl DeleteOSD" json:"-"`

	// This element contains a reference to the OSD configuration that should be deleted.
	OSDToken *tt.ReferenceToken `xml:"OSDToken,omitempty" json:"OSDToken,omitempty"`
}

type DeleteOSDResponse SetConfigurationResponse

type GetMasks struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetMasks" json:"-"`

	// Optional mask token of an existing mask.
	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`

	// Optional token of a Video Source Configuration.
	ConfigurationToken *tt.ReferenceToken `xml:"ConfigurationToken,omitempty" json:"ConfigurationToken,omitempty"`
}

type GetMasksResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetMasksResponse" json:"-"`

	// List of Mask configurations.
	Masks []*Mask `xml:"Masks,omitempty" json:"Masks,omitempty"`
}

type SetMask struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl SetMask" json:"-"`

	// Mask to be updated.
	Mask *Mask `xml:"Mask,omitempty" json:"Mask,omitempty"`
}

type SetMaskResponse SetConfigurationResponse

type GetMaskOptions struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetMaskOptions" json:"-"`

	// Video Source Configuration Token that specifies an existing video source configuration that the options shall be compatible with.
	ConfigurationToken *tt.ReferenceToken `xml:"ConfigurationToken,omitempty" json:"ConfigurationToken,omitempty"`
}

type GetMaskOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl GetMaskOptionsResponse" json:"-"`

	Options *MaskOptions `xml:"Options,omitempty" json:"Options,omitempty"`
}

type CreateMask struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl CreateMask" json:"-"`

	// Contain the initial mask configuration for create.
	Mask *Mask `xml:"Mask,omitempty" json:"Mask,omitempty"`
}

type CreateMaskResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl CreateMaskResponse" json:"-"`

	// Returns Token of the newly created Mask
	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`
}

type DeleteMask struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl DeleteMask" json:"-"`

	// This element contains a reference to the Mask configuration that should be deleted.
	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`
}

type DeleteMaskResponse SetConfigurationResponse

type Capabilities2 struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl Capabilities" json:"-"`

	// Media profile capabilities.
	ProfileCapabilities *ProfileCapabilities `xml:"ProfileCapabilities,omitempty" json:"ProfileCapabilities,omitempty"`

	// Streaming capabilities.
	StreamingCapabilities *StreamingCapabilities `xml:"StreamingCapabilities,omitempty" json:"StreamingCapabilities,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	// Indicates if GetSnapshotUri is supported.

	SnapshotUri bool `xml:"http://www.onvif.org/ver20/media/wsdl SnapshotUri,attr,omitempty" json:"SnapshotUri,omitempty"`

	// Indicates whether or not Rotation feature is supported.

	Rotation bool `xml:"http://www.onvif.org/ver20/media/wsdl Rotation,attr,omitempty" json:"Rotation,omitempty"`

	// Indicates the support for changing video source mode.

	VideoSourceMode bool `xml:"http://www.onvif.org/ver20/media/wsdl VideoSourceMode,attr,omitempty" json:"VideoSourceMode,omitempty"`

	// Indicates if OSD is supported.

	OSD bool `xml:"http://www.onvif.org/ver20/media/wsdl OSD,attr,omitempty" json:"OSD,omitempty"`

	// Indicates the support for temporary osd text configuration.

	TemporaryOSDText bool `xml:"http://www.onvif.org/ver20/media/wsdl TemporaryOSDText,attr,omitempty" json:"TemporaryOSDText,omitempty"`

	// Indicates if Masking is supported.

	Mask bool `xml:"http://www.onvif.org/ver20/media/wsdl Mask,attr,omitempty" json:"Mask,omitempty"`

	// Indicates that privacy masks are only supported at the video source level and not the video source configuration level.
	// If this is true any addition, deletion or change of a privacy mask done for one video source configuration will automatically be
	// applied by the device to a corresponding privacy mask for all other video source configuration associated with the same video source.

	SourceMask bool `xml:"http://www.onvif.org/ver20/media/wsdl SourceMask,attr,omitempty" json:"SourceMask,omitempty"`
}

type ProfileCapabilities struct {
	Items []string `xml:",any" json:"items,omitempty"`

	// Maximum number of profiles supported.

	MaximumNumberOfProfiles int32 `xml:"http://www.onvif.org/ver20/media/wsdl MaximumNumberOfProfiles,attr,omitempty" json:"MaximumNumberOfProfiles,omitempty"`

	// The configurations supported by the device as defined by tr2:ConfigurationEnumeration. The enumeration value "All" shall not be included in this list.

	ConfigurationsSupported *tt.StringAttrList `xml:"http://www.onvif.org/ver20/media/wsdl ConfigurationsSupported,attr,omitempty" json:"ConfigurationsSupported,omitempty"`
}

type StreamingCapabilities struct {
	Items []string `xml:",any" json:"items,omitempty"`

	// Indicates support for live media streaming via RTSP.

	RTSPStreaming bool `xml:"http://www.onvif.org/ver20/media/wsdl RTSPStreaming,attr,omitempty" json:"RTSPStreaming,omitempty"`

	// Indicates support for RTP multicast.

	RTPMulticast bool `xml:"http://www.onvif.org/ver20/media/wsdl RTPMulticast,attr,omitempty" json:"RTPMulticast,omitempty"`

	// Indicates support for RTP/RTSP/TCP.

	RTP_RTSP_TCP bool `xml:"http://www.onvif.org/ver20/media/wsdl RTP_RTSP_TCP,attr,omitempty" json:"RTP_RTSP_TCP,omitempty"`

	// Indicates support for non aggregate RTSP control.

	NonAggregateControl bool `xml:"http://www.onvif.org/ver20/media/wsdl NonAggregateControl,attr,omitempty" json:"NonAggregateControl,omitempty"`

	// If streaming over WebSocket is supported, this shall return the RTSP WebSocket URI as described in Streaming Specification Section 5.1.1.5.

	RTSPWebSocketUri string `xml:"http://www.onvif.org/ver20/media/wsdl RTSPWebSocketUri,attr,omitempty" json:"RTSPWebSocketUri,omitempty"`

	// Indicates support for non-RTSP controlled multicast streaming.

	AutoStartMulticast bool `xml:"http://www.onvif.org/ver20/media/wsdl AutoStartMulticast,attr,omitempty" json:"AutoStartMulticast,omitempty"`
}

type ConfigurationRef struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl Configuration" json:"-"`

	// Type of the configuration as defined by tr2:ConfigurationEnumeration.
	Type string `xml:"Type,omitempty" json:"Type,omitempty"`

	// Reference token of an existing configuration.
	// Token shall be included in the AddConfiguration request along with the type.
	// Token shall be included in the CreateProfile request when Configuration elements are included and type is selected.
	// Token is optional for RemoveConfiguration request. If no token is provided in RemoveConfiguration request, device shall
	// remove the configuration of the type included in the profile.
	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`
}

type ReceiverConfiguration struct {
	*tt.ReceiverConfiguration

	Token *tt.ReferenceToken `xml:"http://www.onvif.org/ver20/media/wsdl token,attr,omitempty" json:"token,omitempty"`
}

type ConfigurationSet struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl Configurations" json:"-"`

	// Optional configuration of the Video input.
	VideoSource *tt.VideoSourceConfiguration `xml:"VideoSource,omitempty" json:"VideoSource,omitempty"`

	// Optional configuration of the Audio input.
	AudioSource *tt.AudioSourceConfiguration `xml:"AudioSource,omitempty" json:"AudioSource,omitempty"`

	// Optional configuration of the Video encoder.
	VideoEncoder *tt.VideoEncoder2Configuration `xml:"VideoEncoder,omitempty" json:"VideoEncoder,omitempty"`

	// Optional configuration of the Audio encoder.
	AudioEncoder *tt.AudioEncoder2Configuration `xml:"AudioEncoder,omitempty" json:"AudioEncoder,omitempty"`

	// Optional configuration of the analytics module and rule engine.
	Analytics *tt.VideoAnalyticsConfiguration `xml:"Analytics,omitempty" json:"Analytics,omitempty"`

	// Optional configuration of the pan tilt zoom unit.
	PTZ *tt.PTZConfiguration `xml:"PTZ,omitempty" json:"PTZ,omitempty"`

	// Optional configuration of the metadata stream.
	Metadata *tt.MetadataConfiguration `xml:"Metadata,omitempty" json:"Metadata,omitempty"`

	// Optional configuration of the Audio output.
	AudioOutput *tt.AudioOutputConfiguration `xml:"AudioOutput,omitempty" json:"AudioOutput,omitempty"`

	// Optional configuration of the Audio decoder.
	AudioDecoder *tt.AudioDecoderConfiguration `xml:"AudioDecoder,omitempty" json:"AudioDecoder,omitempty"`

	// Optional configuration of the Receiver.
	Receiver *ReceiverConfiguration `xml:"Receiver,omitempty" json:"Receiver,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type MediaProfile struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl Profiles" json:"-"`

	// User readable name of the profile.
	Name *tt.Name `xml:"Name,omitempty" json:"Name,omitempty"`

	// The configurations assigned to the profile.
	Configurations *ConfigurationSet `xml:"Configurations,omitempty" json:"Configurations,omitempty"`

	// Unique identifier of the profile.

	Token *tt.ReferenceToken `xml:"http://www.onvif.org/ver20/media/wsdl token,attr,omitempty" json:"token,omitempty"`

	// A value of true signals that the profile cannot be deleted. Default is false.

	Fixed bool `xml:"http://www.onvif.org/ver20/media/wsdl fixed,attr,omitempty" json:"fixed,omitempty"`
}

type GetConfiguration struct {

	// Token of the requested configuration.
	ConfigurationToken *tt.ReferenceToken `xml:"ConfigurationToken,omitempty" json:"ConfigurationToken,omitempty"`

	// Contains the token of an existing media profile the configurations shall be compatible with.
	ProfileToken *tt.ReferenceToken `xml:"ProfileToken,omitempty" json:"ProfileToken,omitempty"`
}

type SetConfigurationResponse struct {
}

type EncoderInstance struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl Codec" json:"-"`

	// Video Media Subtype for the video format. For definitions see tt:VideoEncodingMimeNames and .
	Encoding string `xml:"Encoding,omitempty" json:"Encoding,omitempty"`

	// The minimum guaranteed number of encoder instances (applications) for the VideoSourceConfiguration.
	Number int32 `xml:"Number,omitempty" json:"Number,omitempty"`
}

type EncoderInstanceInfo struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl Info" json:"-"`

	// If a device limits the number of instances for respective Video Codecs the response contains the information how many streams can be set up at the same time per VideoSource.
	Codec []*EncoderInstance `xml:"Codec,omitempty" json:"Codec,omitempty"`

	// The minimum guaranteed total number of encoder instances (applications) per VideoSourceConfiguration. The device is able to deliver the Total number of streams
	Total int32 `xml:"Total,omitempty" json:"Total,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type StartStopMulticastStreaming struct {

	// Contains the token of the Profile that is used to define the multicast stream.
	ProfileToken *tt.ReferenceToken `xml:"ProfileToken,omitempty" json:"ProfileToken,omitempty"`
}

type VideoSourceMode struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl VideoSourceModes" json:"-"`

	// Max frame rate in frames per second for this video source mode.
	MaxFramerate float32 `xml:"MaxFramerate,omitempty" json:"MaxFramerate,omitempty"`

	// Max horizontal and vertical resolution for this video source mode.
	MaxResolution *tt.VideoResolution `xml:"MaxResolution,omitempty" json:"MaxResolution,omitempty"`

	// List of one or more encodings supported for this video source.  For name definitions see tt:VideoEncodingMimeNames, and see .
	Encodings *tt.StringList `xml:"Encodings,omitempty" json:"Encodings,omitempty"`

	// After setting the mode if a device starts to reboot this value is true. If a device change the mode without rebooting this value is false. If true, configured parameters may not be guaranteed by the device after rebooting.
	Reboot bool `xml:"Reboot,omitempty" json:"Reboot,omitempty"`

	// Informative description of this video source mode. This field should be described in English.
	Description *tt.Description `xml:"Description,omitempty" json:"Description,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	// Indicate token for video source mode.

	Token *tt.ReferenceToken `xml:"http://www.onvif.org/ver20/media/wsdl token,attr,omitempty" json:"token,omitempty"`

	// Indication of whether this mode is active. If active this value is true. In case of non-indication, it means as false. The value of true shall be had by only one video source mode.

	Enabled bool `xml:"http://www.onvif.org/ver20/media/wsdl Enabled,attr,omitempty" json:"Enabled,omitempty"`
}

type Mask struct {

	// Token of the VideoSourceConfiguration the Mask is associated with.
	ConfigurationToken *tt.ReferenceToken `xml:"ConfigurationToken,omitempty" json:"ConfigurationToken,omitempty"`

	// Geometric representation of the mask area.
	Polygon *tt.Polygon `xml:"Polygon,omitempty" json:"Polygon,omitempty"`

	// Type of masking as defined by tr2:MaskType:
	//
	Type string `xml:"Type,omitempty" json:"Type,omitempty"`

	// Color of the masked area.
	Color *tt.Color `xml:"Color,omitempty" json:"Color,omitempty"`

	// If set the mask will cover the image, otherwise it will be fully transparent.
	Enabled bool `xml:"Enabled,omitempty" json:"Enabled,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	// Token of the mask.

	Token *tt.ReferenceToken `xml:"http://www.onvif.org/ver20/media/wsdl token,attr,omitempty" json:"token,omitempty"`
}

type MaskOptions struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/media/wsdl Options" json:"-"`

	// Maximum supported number of masks per VideoSourceConfiguration.
	MaxMasks int32 `xml:"MaxMasks,omitempty" json:"MaxMasks,omitempty"`

	// Maximum supported number of points per mask.
	MaxPoints int32 `xml:"MaxPoints,omitempty" json:"MaxPoints,omitempty"`

	// Information which types of tr2:MaskType are supported. Valid values are 'Color', 'Pixelated' and 'Blurred'.
	Types []string `xml:"Types,omitempty" json:"Types,omitempty"`

	// Colors supported.
	Color *tt.ColorOptions `xml:"Color,omitempty" json:"Color,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`

	// Information whether the polygon must have four points and a rectangular shape.

	RectangleOnly bool `xml:"http://www.onvif.org/ver20/media/wsdl RectangleOnly,attr,omitempty" json:"RectangleOnly,omitempty"`

	// Indicates the device capability of change in color of privacy mask for one video source configuration will automatically be applied to all the privacy masks associated with the same video source configuration.

	SingleColorOnly bool `xml:"http://www.onvif.org/ver20/media/wsdl SingleColorOnly,attr,omitempty" json:"SingleColorOnly,omitempty"`
}

type Media2 interface {

	/* Returns the capabilities of the media service. The result is returned in a typed answer. */
	GetServiceCapabilities(request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error)

	GetServiceCapabilitiesContext(ctx context.Context, request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error)

	/* This operation creates a new media profile.
	A created profile created via this method may be deleted via the DeleteProfile method.
	Optionally Configurations can be assinged to the profile on creation. For details regarding profile assignement
	check also the method AddConfiguration.
	*/
	CreateProfile(request *CreateProfile) (*CreateProfileResponse, error)

	CreateProfileContext(ctx context.Context, request *CreateProfile) (*CreateProfileResponse, error)

	/* Retrieve the profile with the specified token or all defined media profiles.

	 */
	GetProfiles(request *GetProfiles) (*GetProfilesResponse, error)

	GetProfilesContext(ctx context.Context, request *GetProfiles) (*GetProfilesResponse, error)

	/* This operation adds one or more Configurations to an existing media profile. If a
	configuration exists in the media profile, it will be replaced. A device shall
	support adding a compatible Configuration to a Profile containing a VideoSourceConfiguration and shall
	support streaming video data of such a profile.
					Note that OSD elements must be added via the CreateOSD command.
	*/
	AddConfiguration(request *AddConfiguration) (*AddConfigurationResponse, error)

	AddConfigurationContext(ctx context.Context, request *AddConfiguration) (*AddConfigurationResponse, error)

	/* This operation removes the listed configurations from an existing media profile. If the
	media profile does not contain one of the listed configurations that item shall be ignored. */
	RemoveConfiguration(request *RemoveConfiguration) (*RemoveConfigurationResponse, error)

	RemoveConfigurationContext(ctx context.Context, request *RemoveConfiguration) (*RemoveConfigurationResponse, error)

	/* This operation deletes a profile. Deletion of a profile is only possible for non-fixed profiles */
	DeleteProfile(request *DeleteProfile) (*DeleteProfileResponse, error)

	DeleteProfileContext(ctx context.Context, request *DeleteProfile) (*DeleteProfileResponse, error)

	/* By default this operation lists all existing video source configurations for a device. Provide a profile token to list only configurations that are compatible with the profile. If a configuration token is provided only a single configuration will be returned. */
	GetVideoSourceConfigurations(request *GetConfiguration) (*GetVideoSourceConfigurationsResponse, error)

	GetVideoSourceConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetVideoSourceConfigurationsResponse, error)

	/* By default this operation lists all existing video encoder configurations for a device. Provide a profile token to list only configurations that are compatible with the profile. If a configuration token is provided only a single configuration will be returned. */
	GetVideoEncoderConfigurations(request *GetConfiguration) (*GetVideoEncoderConfigurationsResponse, error)

	GetVideoEncoderConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetVideoEncoderConfigurationsResponse, error)

	/* By default this operation lists all existing audio source configurations for a device. Provide a profile token to list only configurations that are compatible with the profile. If a configuration token is provided only a single configuration will be returned. */
	GetAudioSourceConfigurations(request *GetConfiguration) (*GetAudioSourceConfigurationsResponse, error)

	GetAudioSourceConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAudioSourceConfigurationsResponse, error)

	/* By default this operation lists all existing audio encoder configurations for a device. Provide a profile token to list only configurations that are compatible with the profile. If a configuration token is provided only a single configuration will be returned. */
	GetAudioEncoderConfigurations(request *GetConfiguration) (*GetAudioEncoderConfigurationsResponse, error)

	GetAudioEncoderConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAudioEncoderConfigurationsResponse, error)

	/* By default this operation lists all existing video analytics configurations for a device. Provide a profile token to list only configurations that are compatible with the profile. If a configuration token is provided only a single configuration will be returned. */
	GetAnalyticsConfigurations(request *GetConfiguration) (*GetAnalyticsConfigurationsResponse, error)

	GetAnalyticsConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAnalyticsConfigurationsResponse, error)

	/* By default this operation lists all existing metadata configurations for a device. Provide a profile token to list only configurations that are compatible with the profile. If a configuration token is provided only a single configuration will be returned. */
	GetMetadataConfigurations(request *GetConfiguration) (*GetMetadataConfigurationsResponse, error)

	GetMetadataConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetMetadataConfigurationsResponse, error)

	/* By default this operation lists all existing audio output configurations for a device. Provide a profile token to list only configurations that are compatible with the profile. If a configuration token is provided only a single configuration will be returned. */
	GetAudioOutputConfigurations(request *GetConfiguration) (*GetAudioOutputConfigurationsResponse, error)

	GetAudioOutputConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAudioOutputConfigurationsResponse, error)

	/* By default this operation lists all existing audio decoder configurations for a device. Provide a profile token to list only configurations that are compatible with the profile. If a configuration token is provided only a single configuration will be returned. */
	GetAudioDecoderConfigurations(request *GetConfiguration) (*GetAudioDecoderConfigurationsResponse, error)

	GetAudioDecoderConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAudioDecoderConfigurationsResponse, error)

	/* This operation modifies a video source configuration. Running streams using this configuration may be immediately updated according to the new settings. The changes are not guaranteed to take effect unless the client requests a new stream URI and restarts any affected stream. NVC methods for changing a running stream are out of scope for this specification. */
	SetVideoSourceConfiguration(request *SetVideoSourceConfiguration) (*SetConfigurationResponse, error)

	SetVideoSourceConfigurationContext(ctx context.Context, request *SetVideoSourceConfiguration) (*SetConfigurationResponse, error)

	/* This operation modifies a video encoder configuration. Running streams using this configuration may be immediately updated according to the new settings. The changes are not guaranteed to take effect unless the client requests a new stream URI and restarts any affected stream. NVC methods for changing a running stream are out of scope for this specification. SessionTimeout is provided as a hint for keeping rtsp session by a device. If necessary the device may adapt parameter values for SessionTimeout elements without returning an error. For the time between keep alive calls the client shall adhere to the timeout value signaled via RTSP. */
	SetVideoEncoderConfiguration(request *SetVideoEncoderConfiguration) (*SetConfigurationResponse, error)

	SetVideoEncoderConfigurationContext(ctx context.Context, request *SetVideoEncoderConfiguration) (*SetConfigurationResponse, error)

	/* This operation modifies an audio source configuration. Running streams using this configuration
	may be immediately updated according to the new settings. The changes are not guaranteed
	to take effect unless the client requests a new stream URI and restarts any affected stream
	NVC methods for changing a running stream are out of scope for this specification. */
	SetAudioSourceConfiguration(request *SetAudioSourceConfiguration) (*SetConfigurationResponse, error)

	SetAudioSourceConfigurationContext(ctx context.Context, request *SetAudioSourceConfiguration) (*SetConfigurationResponse, error)

	/* This operation modifies an audio encoder configuration. Running streams using this configuration may be immediately updated
	according to the new settings. The changes are not guaranteed to take effect unless the client
	requests a new stream URI and restarts any affected streams. NVC methods for changing a
	running stream are out of scope for this specification. */
	SetAudioEncoderConfiguration(request *SetAudioEncoderConfiguration) (*SetConfigurationResponse, error)

	SetAudioEncoderConfigurationContext(ctx context.Context, request *SetAudioEncoderConfiguration) (*SetConfigurationResponse, error)

	/* This operation modifies a metadata configuration. Running streams using this configuration may be updated immediately
	according to the new settings. The changes are not guaranteed to take effect unless the client
	requests a new stream URI and restarts any affected streams. NVC methods for changing a
	running stream are out of scope for this specification. */
	SetMetadataConfiguration(request *SetMetadataConfiguration) (*SetConfigurationResponse, error)

	SetMetadataConfigurationContext(ctx context.Context, request *SetMetadataConfiguration) (*SetConfigurationResponse, error)

	/* This operation modifies an audio output configuration. */
	SetAudioOutputConfiguration(request *SetAudioOutputConfiguration) (*SetConfigurationResponse, error)

	SetAudioOutputConfigurationContext(ctx context.Context, request *SetAudioOutputConfiguration) (*SetConfigurationResponse, error)

	/* This operation modifies an audio decoder configuration. */
	SetAudioDecoderConfiguration(request *SetAudioDecoderConfiguration) (*SetConfigurationResponse, error)

	SetAudioDecoderConfigurationContext(ctx context.Context, request *SetAudioDecoderConfiguration) (*SetConfigurationResponse, error)

	/* This operation returns the available options  (supported values and ranges for video source configuration parameters) when the video source parameters are
	reconfigured If a video source configuration is specified, the options shall concern that
	particular configuration. If a media profile is specified, the options shall be compatible with
	that media profile. */
	GetVideoSourceConfigurationOptions(request *GetConfiguration) (*GetVideoSourceConfigurationOptionsResponse, error)

	GetVideoSourceConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetVideoSourceConfigurationOptionsResponse, error)

	/* This operation returns the available options (supported values and ranges for video encoder
	configuration parameters) when the video encoder parameters are reconfigured.
	This response contains the available video encoder configuration options. If a video encoder configuration is specified,
	the options shall concern that particular configuration. If a media profile is specified, the options shall be
	compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
	*/
	GetVideoEncoderConfigurationOptions(request *GetConfiguration) (*GetVideoEncoderConfigurationOptionsResponse, error)

	GetVideoEncoderConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetVideoEncoderConfigurationOptionsResponse, error)

	/* This operation returns the available options (supported values and ranges for audio source configuration parameters) when the audio source parameters are
	reconfigured. If an audio source configuration is specified, the options shall concern that
	particular configuration. If a media profile is specified, the options shall be compatible with
	that media profile. */
	GetAudioSourceConfigurationOptions(request *GetConfiguration) (*GetAudioSourceConfigurationOptionsResponse, error)

	GetAudioSourceConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetAudioSourceConfigurationOptionsResponse, error)

	/* This operation returns the available options  (supported values and ranges for audio encoder configuration parameters) when the audio encoder parameters are
	reconfigured. */
	GetAudioEncoderConfigurationOptions(request *GetConfiguration) (*GetAudioEncoderConfigurationOptionsResponse, error)

	GetAudioEncoderConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetAudioEncoderConfigurationOptionsResponse, error)

	/* This operation returns the available options (supported values and ranges for metadata configuration parameters) for changing the metadata configuration. */
	GetMetadataConfigurationOptions(request *GetConfiguration) (*GetMetadataConfigurationOptionsResponse, error)

	GetMetadataConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetMetadataConfigurationOptionsResponse, error)

	/* This operation returns the available options (supported values and ranges for audio output configuration parameters) for configuring an audio output. */
	GetAudioOutputConfigurationOptions(request *GetConfiguration) (*GetAudioOutputConfigurationOptionsResponse, error)

	GetAudioOutputConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetAudioOutputConfigurationOptionsResponse, error)

	/* This command list the audio decoding capabilities for a given profile and configuration of a
	device. */
	GetAudioDecoderConfigurationOptions(request *GetConfiguration) (*GetAudioDecoderConfigurationOptionsResponse, error)

	GetAudioDecoderConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetAudioDecoderConfigurationOptionsResponse, error)

	/* The GetVideoEncoderInstances command can be used to request the
	minimum number of guaranteed video encoder instances (applications) per Video Source
	Configuration. */
	GetVideoEncoderInstances(request *GetVideoEncoderInstances) (*GetVideoEncoderInstancesResponse, error)

	GetVideoEncoderInstancesContext(ctx context.Context, request *GetVideoEncoderInstances) (*GetVideoEncoderInstancesResponse, error)

	/* This operation requests a URI that can be used to initiate a live media stream using RTSP as
	the control protocol. The returned URI shall remain valid indefinitely even if the profile is changed.
	Defined stream types are

	If a multicast stream is requested at least one of VideoEncoder2Configuration, AudioEncoder2Configuration and MetadataConfiguration shall have a valid multicast setting.
	For full compatibility with other ONVIF services a device should not generate Uris longer than
	128 octets. */
	GetStreamUri(request *GetStreamUri) (*GetStreamUriResponse, error)

	GetStreamUriContext(ctx context.Context, request *GetStreamUri) (*GetStreamUriResponse, error)

	/* This command starts multicast streaming using a specified media profile of a device.
	Streaming continues until StopMulticastStreaming is called for the same Profile. The
	streaming shall continue after a reboot of the device until a StopMulticastStreaming request is
	received. The multicast address, port and TTL are configured in the
	VideoEncoderConfiguration, AudioEncoderConfiguration and MetadataConfiguration
	respectively. */
	StartMulticastStreaming(request *StartStopMulticastStreaming) (*SetConfigurationResponse, error)

	StartMulticastStreamingContext(ctx context.Context, request *StartStopMulticastStreaming) (*SetConfigurationResponse, error)

	/* This command stops multicast streaming using a specified media profile of a device */
	StopMulticastStreaming(request *StartStopMulticastStreaming) (*SetConfigurationResponse, error)

	StopMulticastStreamingContext(ctx context.Context, request *StartStopMulticastStreaming) (*SetConfigurationResponse, error)

	/* Synchronization points allow clients to decode and correctly use all data after the
	synchronization point.
	For example, if a video stream is configured with a large I-frame distance and a client loses a
	single packet, the client does not display video until the next I-frame is transmitted. In such
	cases, the client can request a Synchronization Point which enforces the device to add an I-Frame as soon as possible. Clients can request Synchronization Points for profiles. The device
	shall add synchronization points for all streams associated with this profile.
	Similarly, a synchronization point is used to get an update on full PTZ or event status through
	the metadata stream.
	If a video stream is associated with the profile, an I-frame shall be added to this video stream.
	If a PTZ metadata stream is associated to the profile,
	the PTZ position shall be repeated within the metadata stream. */
	SetSynchronizationPoint(request *SetSynchronizationPoint) (*SetSynchronizationPointResponse, error)

	SetSynchronizationPointContext(ctx context.Context, request *SetSynchronizationPoint) (*SetSynchronizationPointResponse, error)

	/* A client uses the GetSnapshotUri command to obtain a JPEG snapshot from the
	device. The returned URI shall remain valid indefinitely even if the profile is changed. The
	ValidUntilConnect, ValidUntilReboot and Timeout Parameter shall be set accordingly
	(ValidUntilConnect=false, ValidUntilReboot=false, timeout=PT0S). The URI can be used for
	acquiring a JPEG image through a HTTP GET operation. The image encoding will always be
	JPEG regardless of the encoding setting in the media profile. The Jpeg settings
	(like resolution or quality) may be taken from the profile if suitable. The provided
	image will be updated automatically and independent from calls to GetSnapshotUri. */
	GetSnapshotUri(request *GetSnapshotUri) (*GetSnapshotUriResponse, error)

	GetSnapshotUriContext(ctx context.Context, request *GetSnapshotUri) (*GetSnapshotUriResponse, error)

	/* A device returns the information for current video source mode and settable video source modes of specified video source. A device that indicates a capability of  VideoSourceModes shall support this command. */
	GetVideoSourceModes(request *GetVideoSourceModes) (*GetVideoSourceModesResponse, error)

	GetVideoSourceModesContext(ctx context.Context, request *GetVideoSourceModes) (*GetVideoSourceModesResponse, error)

	/* SetVideoSourceMode changes the media profile structure relating to video source for the specified video source mode. A device that indicates a capability of VideoSourceModes shall support this command. The behavior after changing the mode is not defined in this specification. */
	SetVideoSourceMode(request *SetVideoSourceMode) (*SetVideoSourceModeResponse, error)

	SetVideoSourceModeContext(ctx context.Context, request *SetVideoSourceMode) (*SetVideoSourceModeResponse, error)

	/* This operation lists existing OSD configurations for the device.

	 */
	GetOSDs(request *GetOSDs) (*GetOSDsResponse, error)

	GetOSDsContext(ctx context.Context, request *GetOSDs) (*GetOSDsResponse, error)

	/* Get the OSD Options. */
	GetOSDOptions(request *GetOSDOptions) (*GetOSDOptionsResponse, error)

	GetOSDOptionsContext(ctx context.Context, request *GetOSDOptions) (*GetOSDOptionsResponse, error)

	/* Set the OSD */
	SetOSD(request *SetOSD) (*SetConfigurationResponse, error)

	SetOSDContext(ctx context.Context, request *SetOSD) (*SetConfigurationResponse, error)

	/* Create the OSD. */
	CreateOSD(request *CreateOSD) (*CreateOSDResponse, error)

	CreateOSDContext(ctx context.Context, request *CreateOSD) (*CreateOSDResponse, error)

	/* Delete the OSD. */
	DeleteOSD(request *DeleteOSD) (*SetConfigurationResponse, error)

	DeleteOSDContext(ctx context.Context, request *DeleteOSD) (*SetConfigurationResponse, error)

	/* This operation lists existing Mask configurations for the device.

	 */
	GetMasks(request *GetMasks) (*GetMasksResponse, error)

	GetMasksContext(ctx context.Context, request *GetMasks) (*GetMasksResponse, error)

	/* Get the Mask Options. */
	GetMaskOptions(request *GetMaskOptions) (*GetMaskOptionsResponse, error)

	GetMaskOptionsContext(ctx context.Context, request *GetMaskOptions) (*GetMaskOptionsResponse, error)

	/* Set the Mask */
	SetMask(request *SetMask) (*SetConfigurationResponse, error)

	SetMaskContext(ctx context.Context, request *SetMask) (*SetConfigurationResponse, error)

	/* Create the Mask. */
	CreateMask(request *CreateMask) (*CreateMaskResponse, error)

	CreateMaskContext(ctx context.Context, request *CreateMask) (*CreateMaskResponse, error)

	/* Delete the Mask. */
	DeleteMask(request *DeleteMask) (*SetConfigurationResponse, error)

	DeleteMaskContext(ctx context.Context, request *DeleteMask) (*SetConfigurationResponse, error)
}

type media2 struct {
	client *soap.Client
}

func NewMedia2(client *soap.Client) Media2 {
	return &media2{
		client: client,
	}
}

func (service *media2) GetServiceCapabilitiesContext(ctx context.Context, request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error) {
	response := new(GetServiceCapabilitiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetServiceCapabilities(request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error) {
	return service.GetServiceCapabilitiesContext(
		context.Background(),
		request,
	)
}

func (service *media2) CreateProfileContext(ctx context.Context, request *CreateProfile) (*CreateProfileResponse, error) {
	response := new(CreateProfileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) CreateProfile(request *CreateProfile) (*CreateProfileResponse, error) {
	return service.CreateProfileContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetProfilesContext(ctx context.Context, request *GetProfiles) (*GetProfilesResponse, error) {
	response := new(GetProfilesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetProfiles(request *GetProfiles) (*GetProfilesResponse, error) {
	return service.GetProfilesContext(
		context.Background(),
		request,
	)
}

func (service *media2) AddConfigurationContext(ctx context.Context, request *AddConfiguration) (*AddConfigurationResponse, error) {
	response := new(AddConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) AddConfiguration(request *AddConfiguration) (*AddConfigurationResponse, error) {
	return service.AddConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *media2) RemoveConfigurationContext(ctx context.Context, request *RemoveConfiguration) (*RemoveConfigurationResponse, error) {
	response := new(RemoveConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) RemoveConfiguration(request *RemoveConfiguration) (*RemoveConfigurationResponse, error) {
	return service.RemoveConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *media2) DeleteProfileContext(ctx context.Context, request *DeleteProfile) (*DeleteProfileResponse, error) {
	response := new(DeleteProfileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) DeleteProfile(request *DeleteProfile) (*DeleteProfileResponse, error) {
	return service.DeleteProfileContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetVideoSourceConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetVideoSourceConfigurationsResponse, error) {
	response := new(GetVideoSourceConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetVideoSourceConfigurations(request *GetConfiguration) (*GetVideoSourceConfigurationsResponse, error) {
	return service.GetVideoSourceConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetVideoEncoderConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetVideoEncoderConfigurationsResponse, error) {
	response := new(GetVideoEncoderConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetVideoEncoderConfigurations(request *GetConfiguration) (*GetVideoEncoderConfigurationsResponse, error) {
	return service.GetVideoEncoderConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetAudioSourceConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAudioSourceConfigurationsResponse, error) {
	response := new(GetAudioSourceConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetAudioSourceConfigurations(request *GetConfiguration) (*GetAudioSourceConfigurationsResponse, error) {
	return service.GetAudioSourceConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetAudioEncoderConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAudioEncoderConfigurationsResponse, error) {
	response := new(GetAudioEncoderConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetAudioEncoderConfigurations(request *GetConfiguration) (*GetAudioEncoderConfigurationsResponse, error) {
	return service.GetAudioEncoderConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetAnalyticsConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAnalyticsConfigurationsResponse, error) {
	response := new(GetAnalyticsConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetAnalyticsConfigurations(request *GetConfiguration) (*GetAnalyticsConfigurationsResponse, error) {
	return service.GetAnalyticsConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetMetadataConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetMetadataConfigurationsResponse, error) {
	response := new(GetMetadataConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetMetadataConfigurations(request *GetConfiguration) (*GetMetadataConfigurationsResponse, error) {
	return service.GetMetadataConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetAudioOutputConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAudioOutputConfigurationsResponse, error) {
	response := new(GetAudioOutputConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetAudioOutputConfigurations(request *GetConfiguration) (*GetAudioOutputConfigurationsResponse, error) {
	return service.GetAudioOutputConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetAudioDecoderConfigurationsContext(ctx context.Context, request *GetConfiguration) (*GetAudioDecoderConfigurationsResponse, error) {
	response := new(GetAudioDecoderConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetAudioDecoderConfigurations(request *GetConfiguration) (*GetAudioDecoderConfigurationsResponse, error) {
	return service.GetAudioDecoderConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetVideoSourceConfigurationContext(ctx context.Context, request *SetVideoSourceConfiguration) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetVideoSourceConfiguration(request *SetVideoSourceConfiguration) (*SetConfigurationResponse, error) {
	return service.SetVideoSourceConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetVideoEncoderConfigurationContext(ctx context.Context, request *SetVideoEncoderConfiguration) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetVideoEncoderConfiguration(request *SetVideoEncoderConfiguration) (*SetConfigurationResponse, error) {
	return service.SetVideoEncoderConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetAudioSourceConfigurationContext(ctx context.Context, request *SetAudioSourceConfiguration) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetAudioSourceConfiguration(request *SetAudioSourceConfiguration) (*SetConfigurationResponse, error) {
	return service.SetAudioSourceConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetAudioEncoderConfigurationContext(ctx context.Context, request *SetAudioEncoderConfiguration) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetAudioEncoderConfiguration(request *SetAudioEncoderConfiguration) (*SetConfigurationResponse, error) {
	return service.SetAudioEncoderConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetMetadataConfigurationContext(ctx context.Context, request *SetMetadataConfiguration) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetMetadataConfiguration(request *SetMetadataConfiguration) (*SetConfigurationResponse, error) {
	return service.SetMetadataConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetAudioOutputConfigurationContext(ctx context.Context, request *SetAudioOutputConfiguration) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetAudioOutputConfiguration(request *SetAudioOutputConfiguration) (*SetConfigurationResponse, error) {
	return service.SetAudioOutputConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetAudioDecoderConfigurationContext(ctx context.Context, request *SetAudioDecoderConfiguration) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetAudioDecoderConfiguration(request *SetAudioDecoderConfiguration) (*SetConfigurationResponse, error) {
	return service.SetAudioDecoderConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetVideoSourceConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetVideoSourceConfigurationOptionsResponse, error) {
	response := new(GetVideoSourceConfigurationOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetVideoSourceConfigurationOptions(request *GetConfiguration) (*GetVideoSourceConfigurationOptionsResponse, error) {
	return service.GetVideoSourceConfigurationOptionsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetVideoEncoderConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetVideoEncoderConfigurationOptionsResponse, error) {
	response := new(GetVideoEncoderConfigurationOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetVideoEncoderConfigurationOptions(request *GetConfiguration) (*GetVideoEncoderConfigurationOptionsResponse, error) {
	return service.GetVideoEncoderConfigurationOptionsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetAudioSourceConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetAudioSourceConfigurationOptionsResponse, error) {
	response := new(GetAudioSourceConfigurationOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetAudioSourceConfigurationOptions(request *GetConfiguration) (*GetAudioSourceConfigurationOptionsResponse, error) {
	return service.GetAudioSourceConfigurationOptionsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetAudioEncoderConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetAudioEncoderConfigurationOptionsResponse, error) {
	response := new(GetAudioEncoderConfigurationOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetAudioEncoderConfigurationOptions(request *GetConfiguration) (*GetAudioEncoderConfigurationOptionsResponse, error) {
	return service.GetAudioEncoderConfigurationOptionsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetMetadataConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetMetadataConfigurationOptionsResponse, error) {
	response := new(GetMetadataConfigurationOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetMetadataConfigurationOptions(request *GetConfiguration) (*GetMetadataConfigurationOptionsResponse, error) {
	return service.GetMetadataConfigurationOptionsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetAudioOutputConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetAudioOutputConfigurationOptionsResponse, error) {
	response := new(GetAudioOutputConfigurationOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetAudioOutputConfigurationOptions(request *GetConfiguration) (*GetAudioOutputConfigurationOptionsResponse, error) {
	return service.GetAudioOutputConfigurationOptionsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetAudioDecoderConfigurationOptionsContext(ctx context.Context, request *GetConfiguration) (*GetAudioDecoderConfigurationOptionsResponse, error) {
	response := new(GetAudioDecoderConfigurationOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetAudioDecoderConfigurationOptions(request *GetConfiguration) (*GetAudioDecoderConfigurationOptionsResponse, error) {
	return service.GetAudioDecoderConfigurationOptionsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetVideoEncoderInstancesContext(ctx context.Context, request *GetVideoEncoderInstances) (*GetVideoEncoderInstancesResponse, error) {
	response := new(GetVideoEncoderInstancesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetVideoEncoderInstances(request *GetVideoEncoderInstances) (*GetVideoEncoderInstancesResponse, error) {
	return service.GetVideoEncoderInstancesContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetStreamUriContext(ctx context.Context, request *GetStreamUri) (*GetStreamUriResponse, error) {
	response := new(GetStreamUriResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetStreamUri(request *GetStreamUri) (*GetStreamUriResponse, error) {
	return service.GetStreamUriContext(
		context.Background(),
		request,
	)
}

func (service *media2) StartMulticastStreamingContext(ctx context.Context, request *StartStopMulticastStreaming) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) StartMulticastStreaming(request *StartStopMulticastStreaming) (*SetConfigurationResponse, error) {
	return service.StartMulticastStreamingContext(
		context.Background(),
		request,
	)
}

func (service *media2) StopMulticastStreamingContext(ctx context.Context, request *StartStopMulticastStreaming) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) StopMulticastStreaming(request *StartStopMulticastStreaming) (*SetConfigurationResponse, error) {
	return service.StopMulticastStreamingContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetSynchronizationPointContext(ctx context.Context, request *SetSynchronizationPoint) (*SetSynchronizationPointResponse, error) {
	response := new(SetSynchronizationPointResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetSynchronizationPoint(request *SetSynchronizationPoint) (*SetSynchronizationPointResponse, error) {
	return service.SetSynchronizationPointContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetSnapshotUriContext(ctx context.Context, request *GetSnapshotUri) (*GetSnapshotUriResponse, error) {
	response := new(GetSnapshotUriResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetSnapshotUri(request *GetSnapshotUri) (*GetSnapshotUriResponse, error) {
	return service.GetSnapshotUriContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetVideoSourceModesContext(ctx context.Context, request *GetVideoSourceModes) (*GetVideoSourceModesResponse, error) {
	response := new(GetVideoSourceModesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetVideoSourceModes(request *GetVideoSourceModes) (*GetVideoSourceModesResponse, error) {
	return service.GetVideoSourceModesContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetVideoSourceModeContext(ctx context.Context, request *SetVideoSourceMode) (*SetVideoSourceModeResponse, error) {
	response := new(SetVideoSourceModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetVideoSourceMode(request *SetVideoSourceMode) (*SetVideoSourceModeResponse, error) {
	return service.SetVideoSourceModeContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetOSDsContext(ctx context.Context, request *GetOSDs) (*GetOSDsResponse, error) {
	response := new(GetOSDsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetOSDs(request *GetOSDs) (*GetOSDsResponse, error) {
	return service.GetOSDsContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetOSDOptionsContext(ctx context.Context, request *GetOSDOptions) (*GetOSDOptionsResponse, error) {
	response := new(GetOSDOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetOSDOptions(request *GetOSDOptions) (*GetOSDOptionsResponse, error) {
	return service.GetOSDOptionsContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetOSDContext(ctx context.Context, request *SetOSD) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetOSD(request *SetOSD) (*SetConfigurationResponse, error) {
	return service.SetOSDContext(
		context.Background(),
		request,
	)
}

func (service *media2) CreateOSDContext(ctx context.Context, request *CreateOSD) (*CreateOSDResponse, error) {
	response := new(CreateOSDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) CreateOSD(request *CreateOSD) (*CreateOSDResponse, error) {
	return service.CreateOSDContext(
		context.Background(),
		request,
	)
}

func (service *media2) DeleteOSDContext(ctx context.Context, request *DeleteOSD) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) DeleteOSD(request *DeleteOSD) (*SetConfigurationResponse, error) {
	return service.DeleteOSDContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetMasksContext(ctx context.Context, request *GetMasks) (*GetMasksResponse, error) {
	response := new(GetMasksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetMasks(request *GetMasks) (*GetMasksResponse, error) {
	return service.GetMasksContext(
		context.Background(),
		request,
	)
}

func (service *media2) GetMaskOptionsContext(ctx context.Context, request *GetMaskOptions) (*GetMaskOptionsResponse, error) {
	response := new(GetMaskOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) GetMaskOptions(request *GetMaskOptions) (*GetMaskOptionsResponse, error) {
	return service.GetMaskOptionsContext(
		context.Background(),
		request,
	)
}

func (service *media2) SetMaskContext(ctx context.Context, request *SetMask) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) SetMask(request *SetMask) (*SetConfigurationResponse, error) {
	return service.SetMaskContext(
		context.Background(),
		request,
	)
}

func (service *media2) CreateMaskContext(ctx context.Context, request *CreateMask) (*CreateMaskResponse, error) {
	response := new(CreateMaskResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) CreateMask(request *CreateMask) (*CreateMaskResponse, error) {
	return service.CreateMaskContext(
		context.Background(),
		request,
	)
}

func (service *media2) DeleteMaskContext(ctx context.Context, request *DeleteMask) (*SetConfigurationResponse, error) {
	response := new(SetConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *media2) DeleteMask(request *DeleteMask) (*SetConfigurationResponse, error) {
	return service.DeleteMaskContext(
		context.Background(),
		request,
	)
}
