// Code generated by gowsdl DO NOT EDIT.

package humanface

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"

	tt "github.com/eyetowers/gonvif/pkg/generated/onvif/www_onvif_org/ver10/schema"
)

// against "unused imports"
var _ time.Time
var _ xml.Name
var _ context.Context
var _ soap.SOAPEnvelope

type Gender string

const (
	GenderMale Gender = "Male"

	GenderFemale Gender = "Female"
)

type Complexion string

const (
	ComplexionWhite Complexion = "White"

	ComplexionBlack Complexion = "Black"

	ComplexionAsian Complexion = "Asian"

	ComplexionOther Complexion = "Other"
)

type FacialShape string

const (
	FacialShapeLong FacialShape = "Long"

	FacialShapeRound FacialShape = "Round"

	FacialShapeSquare FacialShape = "Square"

	FacialShapeOval FacialShape = "Oval"

	FacialShapeOther FacialShape = "Other"
)

type Length string

const (
	LengthLong Length = "Long"

	LengthMedium Length = "Medium"

	LengthShort Length = "Short"
)

type HairStyle string

const (
	HairStyleStraight HairStyle = "Straight"

	HairStyleWave HairStyle = "Wave"

	HairStyleCurly HairStyle = "Curly"

	HairStyleCrewCut HairStyle = "CrewCut"

	HairStyleBald HairStyle = "Bald"

	HairStylePonytail HairStyle = "Ponytail"

	HairStylePigtail HairStyle = "Pigtail"

	HairStyleOther HairStyle = "Other"
)

type EyebrowWidth string

const (
	EyebrowWidthLong EyebrowWidth = "Long"

	EyebrowWidthShort EyebrowWidth = "Short"
)

type EyebrowSpace string

const (
	EyebrowSpaceJoint EyebrowSpace = "Joint"

	EyebrowSpaceSeparate EyebrowSpace = "Separate"
)

type EyeShape string

const (
	EyeShapeAlmond EyeShape = "Almond"

	EyeShapeSlitty EyeShape = "Slitty"

	EyeShapeRound EyeShape = "Round"

	EyeShapeOther EyeShape = "Other"
)

type Eyelid string

const (
	EyelidSingle Eyelid = "Single"

	EyelidDouble Eyelid = "Double"

	EyelidOther Eyelid = "Other"
)

type Eyeball string

const (
	EyeballBlack Eyeball = "Black"

	EyeballBlue Eyeball = "Blue"

	EyeballBrown Eyeball = "Brown"

	EyeballGray Eyeball = "Gray"

	EyeballGreen Eyeball = "Green"

	EyeballPink Eyeball = "Pink"

	EyeballOther Eyeball = "Other"
)

type Ear string

const (
	EarRound Ear = "Round"

	EarPointed Ear = "Pointed"

	EarNarrow Ear = "Narrow"

	EarBroadLobe Ear = "BroadLobe"

	EarOther Ear = "Other"
)

type NoseLength string

const (
	NoseLengthShort NoseLength = "Short"

	NoseLengthLong NoseLength = "Long"
)

type NoseBridge string

const (
	NoseBridgeStraight NoseBridge = "Straight"

	NoseBridgeArch NoseBridge = "Arch"
)

type NoseWing string

const (
	NoseWingNarrow NoseWing = "Narrow"

	NoseWingBroad NoseWing = "Broad"
)

type NoseEnd string

const (
	NoseEndSnub NoseEnd = "Snub"

	NoseEndTurnedup NoseEnd = "Turnedup"

	NoseEndFlat NoseEnd = "Flat"

	NoseEndHooked NoseEnd = "Hooked"

	NoseEndOther NoseEnd = "Other"
)

type Lip string

const (
	LipFull Lip = "Full"

	LipMedium Lip = "Medium"

	LipThin Lip = "Thin"
)

type Chin string

const (
	ChinDouble Chin = "Double"

	ChinPointed Chin = "Pointed"

	ChinRound Chin = "Round"
)

type Expression string

const (
	ExpressionNatural Expression = "Natural"

	ExpressionSmile Expression = "Smile"

	ExpressionRaisedEyebrows Expression = "RaisedEyebrows"

	ExpressionSquint Expression = "Squint"

	ExpressionFrown Expression = "Frown"

	ExpressionOther Expression = "Other"
)

type FrecklesType string

const (
	FrecklesTypeAroundCheek FrecklesType = "AroundCheek"

	FrecklesTypeNose FrecklesType = "Nose"

	FrecklesTypeForehead FrecklesType = "forehead"

	FrecklesTypeOther FrecklesType = "Other"
)

type Hair struct {

	// Describe the length of the Hair, acceptable values are defined in fc:Length. Short usually means that the end of the hair doesnâ€™t exceed the shoulder.
	// Medium usually means that the end of the hair is parallel with the shoulder. Long usually means that the end of the hair exceeds the chest.
	//
	Length string `xml:"Length,omitempty" json:"Length,omitempty"`

	// Describe the style of the Hair, acceptable values are defined in fc:HairStyle.
	Style string `xml:"Style,omitempty" json:"Style,omitempty"`

	// Describe the color of the Hair.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	// Describe the bangs of the Hair
	Bangs bool `xml:"Bangs,omitempty" json:"Bangs,omitempty"`
}

type Eyebrow struct {

	// Describe the shape of the eyebrow, Short usually means that the width of eye brow is shorter than the length of eye.
	// Long usually means that the width of eye brow is equal to or longer than the length of eye.acceptable values are defined in fc:EyebrowWidth.
	//
	Width string `xml:"Width,omitempty" json:"Width,omitempty"`

	// Describe the Color of the eyebrow.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	// Describe the space of two eyebrows, acceptable values are defined in fc:EyebrowSpace.
	Space string `xml:"Space,omitempty" json:"Space,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Eye struct {

	// Describe the shape of the eye, acceptable values are defined in fc:EyeBrowShape.
	Shape string `xml:"Shape,omitempty" json:"Shape,omitempty"`

	// Describe the eyelid of the eye, acceptable values are defined in fc:Eyelid.
	Eyelid string `xml:"Eyelid,omitempty" json:"Eyelid,omitempty"`

	// Describe the eyeball of the eye, acceptable values are defined in fc:Eyeball.
	Eyeball string `xml:"Eyeball,omitempty" json:"Eyeball,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Nose struct {

	// Describe the length of the nose, acceptable values are defined in fc:NoseLength.
	// Long usually means that the length of the nose is longer than 1/3 of the length of the face.
	// short usually means that the length of the nose is shorter than 1/3 of the length of the face.
	//
	Length string `xml:"Length,omitempty" json:"Length,omitempty"`

	// Describe the bridge of the nose, acceptable values are defined in fc:NoseBridge.
	NoseBridge string `xml:"NoseBridge,omitempty" json:"NoseBridge,omitempty"`

	// Describe the wing of the nose, acceptable values are defined in fc:NoseWing.
	NoseWing string `xml:"NoseWing,omitempty" json:"NoseWing,omitempty"`

	// Describe the end of the nose, acceptable values are defined in fc:NoseEnd.
	NoseEnd string `xml:"NoseEnd,omitempty" json:"NoseEnd,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type FacialHair struct {

	// Describe if there is mustache on the face.
	Mustache bool `xml:"Mustache,omitempty" json:"Mustache,omitempty"`

	// Describe if there are Beard on the face.
	Beard bool `xml:"Beard,omitempty" json:"Beard,omitempty"`

	// Describe if there are sideburns on the face.
	Sideburn bool `xml:"Sideburn,omitempty" json:"Sideburn,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type PoseAngle struct {

	// Describe the pose angle of the face.
	PoseAngles *tt.GeoOrientation `xml:"PoseAngles,omitempty" json:"PoseAngles,omitempty"`

	// Describe the expected degree of uncertainty of the pose angle yaw, pitch, and roll.
	Uncertainty *tt.GeoOrientation `xml:"Uncertainty,omitempty" json:"Uncertainty,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type AccessoryDescription struct {

	// Describe if the object wear a accessory .
	Wear bool `xml:"Wear,omitempty" json:"Wear,omitempty"`

	// Describe the Color of the accessory.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Accessory struct {

	// Describe if the object wear opticals.
	Opticals *AccessoryDescription `xml:"Opticals,omitempty" json:"Opticals,omitempty"`

	// Describe if the object wear hat.
	Hat *AccessoryDescription `xml:"Hat,omitempty" json:"Hat,omitempty"`

	// Describe if the object wear mask.
	Mask *AccessoryDescription `xml:"Mask,omitempty" json:"Mask,omitempty"`

	// Describe if the object wear hijab.
	Hijab *AccessoryDescription `xml:"Hijab,omitempty" json:"Hijab,omitempty"`

	// Describe if the object wear Helmet.
	Helmet *AccessoryDescription `xml:"Helmet,omitempty" json:"Helmet,omitempty"`

	// Describe if the object wear Kerchief.
	Kerchief *AccessoryDescription `xml:"Kerchief,omitempty" json:"Kerchief,omitempty"`

	// Describe if there is a patch on the right eye.
	RightEyePatch *AccessoryDescription `xml:"RightEyePatch,omitempty" json:"RightEyePatch,omitempty"`

	// Describe if there is a patch on the left eye.
	LeftEyePatch *AccessoryDescription `xml:"LeftEyePatch,omitempty" json:"LeftEyePatch,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type AdditionalFeatures struct {

	// Is there scar on the face.
	Scar bool `xml:"Scar,omitempty" json:"Scar,omitempty"`

	// Is there mole on the face.
	Mole bool `xml:"Mole,omitempty" json:"Mole,omitempty"`

	// Is there Tattoo on the face.
	Tattoo bool `xml:"Tattoo,omitempty" json:"Tattoo,omitempty"`

	// Describe freckles on the face, acceptable values are defined in fc:FrecklesType.
	Freckles string `xml:"Freckles,omitempty" json:"Freckles,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type HumanFace struct {

	// Describe the age of the face.
	Age *tt.IntRange `xml:"Age,omitempty" json:"Age,omitempty"`

	// Describe the gender of the face, acceptable values are defined in fc:Gender.
	Gender string `xml:"Gender,omitempty" json:"Gender,omitempty"`

	// Describe the temperature of the face, in Kelvin.
	Temperature float32 `xml:"Temperature,omitempty" json:"Temperature,omitempty"`

	// Describe the complexion of the face, acceptable values are defined in fc:Complexion.
	Complexion string `xml:"Complexion,omitempty" json:"Complexion,omitempty"`

	// Describe the FacialShape, acceptable values are defined fc:FacialShape.
	FacialShape string `xml:"FacialShape,omitempty" json:"FacialShape,omitempty"`

	// Describe the hair of the face.
	Hair *Hair `xml:"Hair,omitempty" json:"Hair,omitempty"`

	// Describe the eyebrow of the face.
	Eyebrow *Eyebrow `xml:"Eyebrow,omitempty" json:"Eyebrow,omitempty"`

	// Describe the eye of the face.
	Eye *Eye `xml:"Eye,omitempty" json:"Eye,omitempty"`

	// Describe the Ear of the face.
	Ear *Ear `xml:"Ear,omitempty" json:"Ear,omitempty"`

	// Describe the nose of the face.
	Nose *Nose `xml:"Nose,omitempty" json:"Nose,omitempty"`

	// Describe the facial hair of the face.
	FacialHair *FacialHair `xml:"FacialHair,omitempty" json:"FacialHair,omitempty"`

	// Describe the lip of the face, acceptable values are defined in fc:Lip.
	Lip string `xml:"Lip,omitempty" json:"Lip,omitempty"`

	// Describe the Chin of the face, acceptable values are defined in fc:Chin.
	Chin string `xml:"Chin,omitempty" json:"Chin,omitempty"`

	// Describe the expression on the face, acceptable values are defined in fc:Expression.
	Expression string `xml:"Expression,omitempty" json:"Expression,omitempty"`

	// Describe the pose angle of the face.
	PoseAngle *PoseAngle `xml:"PoseAngle,omitempty" json:"PoseAngle,omitempty"`

	// Describe the Accessory of the face.
	Accessory *Accessory `xml:"Accessory,omitempty" json:"Accessory,omitempty"`

	// Describe the other features, eg scar, mole etc of the face.
	AdditionalFeatures *AdditionalFeatures `xml:"AdditionalFeatures,omitempty" json:"AdditionalFeatures,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}
