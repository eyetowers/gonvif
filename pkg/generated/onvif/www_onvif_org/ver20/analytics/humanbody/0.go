// Code generated by gowsdl DO NOT EDIT.

package humanbody

import (
	"context"
	"encoding/xml"
	"github.com/eyetowers/gowsdl/soap"
	"time"

	tt "github.com/eyetowers/gonvif/pkg/generated/onvif/www_onvif_org/ver10/schema"
)

// against "unused imports"
var _ time.Time
var _ xml.Name
var _ context.Context
var _ soap.SOAPEnvelope

type BodyShape string

const (
	BodyShapeFat BodyShape = "Fat"

	BodyShapeThin BodyShape = "Thin"

	BodyShapeOther BodyShape = "Other"
)

type TopsCategory string

const (
	TopsCategoryLongSleeve TopsCategory = "LongSleeve"

	TopsCategoryShortSleeve TopsCategory = "ShortSleeve"

	TopsCategoryOther TopsCategory = "Other"
)

type Grain string

const (
	GrainStria Grain = "Stria"

	GrainPlaid Grain = "Plaid"

	GrainPureColour Grain = "PureColour"

	GrainDecal Grain = "Decal"

	GrainOther Grain = "Other"
)

type TopsStyle string

const (
	TopsStyleTailor TopsStyle = "Tailor"

	TopsStyleJacket TopsStyle = "Jacket"

	TopsStyleSweater TopsStyle = "Sweater"

	TopsStyleOvercoat TopsStyle = "Overcoat"

	TopsStyleDress TopsStyle = "Dress"

	TopsStyleOther TopsStyle = "Other"
)

type BottomsCategory string

const (
	BottomsCategoryTrousers BottomsCategory = "Trousers"

	BottomsCategoryShorts BottomsCategory = "Shorts"

	BottomsCategorySkirt BottomsCategory = "Skirt"

	BottomsCategoryOther BottomsCategory = "Other"
)

type BottomsStyle string

const (
	BottomsStyleFornalPants BottomsStyle = "FornalPants"

	BottomsStyleJeans BottomsStyle = "Jeans"

	BottomsStyleOther BottomsStyle = "Other"
)

type ShoesCategory string

const (
	ShoesCategoryLeatherShoes ShoesCategory = "LeatherShoes"

	ShoesCategorySneakers ShoesCategory = "Sneakers"

	ShoesCategorySandal ShoesCategory = "Sandal"

	ShoesCategorySlipper ShoesCategory = "Slipper"

	ShoesCategoryOther ShoesCategory = "Other"
)

type KnapsackCategory string

const (
	KnapsackCategorySingleShoulderBag KnapsackCategory = "SingleShoulderBag"

	KnapsackCategoryBackpack KnapsackCategory = "Backpack"

	KnapsackCategoryOther KnapsackCategory = "Other"
)

type CartCategory string

const (
	CartCategoryBabyCarriage CartCategory = "BabyCarriage"

	CartCategoryTwoWheelVehicle CartCategory = "TwoWheelVehicle"

	CartCategoryTricyle CartCategory = "Tricyle"

	CartCategoryOther CartCategory = "Other"
)

type Smoking string

const (
	SmokingNoSmoking Smoking = "NoSmoking"

	SmokingCigar Smoking = "Cigar"

	SmokingElectronicCigarettes Smoking = "ElectronicCigarettes"

	SmokingOther Smoking = "Other"
)

type UsingMobile string

const (
	UsingMobileByLeftHand UsingMobile = "ByLeftHand"

	UsingMobileByRightHand UsingMobile = "ByRightHand"

	UsingMobileOther UsingMobile = "Other"
)

type HumanActivity string

const (
	HumanActivityWalking HumanActivity = "Walking"

	HumanActivityRunning HumanActivity = "Running"

	HumanActivityFallen HumanActivity = "Fallen"

	HumanActivitySquatting HumanActivity = "Squatting"

	HumanActivitySitting HumanActivity = "Sitting"

	HumanActivityStanding HumanActivity = "Standing"

	HumanActivityDriving HumanActivity = "Driving"

	HumanActivityOther HumanActivity = "Other"
)

type BodyMetric struct {

	// Describe the Stature of the body, the unit is centimeter.
	Height int32 `xml:"Height,omitempty" json:"Height,omitempty"`

	// Describle the Shape of the body, acceptable values are defined in bd:BodyShape.
	BodyShape string `xml:"BodyShape,omitempty" json:"BodyShape,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Scarf struct {

	// Describe the Color of the Scarf, acceptable values are defined in ColorDescriptor.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	// Describe if the body wears the Scarf.
	Wear bool `xml:"Wear,omitempty" json:"Wear,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Gloves struct {

	// Describe the Color of Gloves, acceptable values are defined in tt:ColorDescriptor.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	// Describe if the body wears Gloves.
	Wear bool `xml:"Wear,omitempty" json:"Wear,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Tops struct {

	// Describe the Category of the Tops, acceptable values are defined in bd:TopsCategory.
	Category string `xml:"Category,omitempty" json:"Category,omitempty"`

	// Describe the Color of the Tops, acceptable values are defined in tt:ColorDescriptor.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	// Describe the Grain of the Tops, acceptable values are defined in bd:Grain.
	Grain string `xml:"Grain,omitempty" json:"Grain,omitempty"`

	// Describe the Style of the Tops, acceptable values are defined in bd:TopsStyle.
	Style string `xml:"Style,omitempty" json:"Style,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Bottoms struct {

	// Describe the Category of the Bottoms, acceptable values are defined in bd:BottomsCategory.
	Category string `xml:"Category,omitempty" json:"Category,omitempty"`

	// Describe the Color of the Bottoms, acceptable values are defined in tt:ColorDescriptor.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	// Describe the Grain of the Bottoms, acceptable values are defined in bd:Grain.
	Grain string `xml:"Grain,omitempty" json:"Grain,omitempty"`

	// Describe the Style of the Bottoms, acceptable values are defined in bd:BottomsStyle.
	Style string `xml:"Style,omitempty" json:"Style,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Shoes struct {

	// Describe the Category of the Shoes, acceptable values are defined in bd:ShoesCategory.
	Category string `xml:"Category,omitempty" json:"Category,omitempty"`

	// Describe the Color of the Shoes, acceptable values are defined in tt:ColorDescriptor.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Clothing struct {

	// Describe the Scarf of the body,acceptable values are defined in bd:Scarf.
	Scarf *Scarf `xml:"Scarf,omitempty" json:"Scarf,omitempty"`

	// Describe Gloves of the body,acceptable values are defined in bd:Gloves.
	Gloves *Gloves `xml:"Gloves,omitempty" json:"Gloves,omitempty"`

	// Describe the Tops of the body,acceptable values are defined in bd:Tops.
	Tops *Tops `xml:"Tops,omitempty" json:"Tops,omitempty"`

	// Describe the Bottoms of the body,acceptable values are defined in bd:Bottoms.
	Bottoms *Bottoms `xml:"Bottoms,omitempty" json:"Bottoms,omitempty"`

	// Describe the Shoes of the body,acceptable values are defined in bd:Shoes.
	Shoes *Shoes `xml:"Shoes,omitempty" json:"Shoes,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Bag struct {

	// Describe the Category of the Bag, acceptable values are defined in bd:KnapsackCategory.
	Category string `xml:"Category,omitempty" json:"Category,omitempty"`

	// Describe the Colour of the Bag, acceptable values are defined in tt:ColorDescriptor.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Umbrella struct {

	// Describe the Color of the Bag, acceptable values are defined in tt:ColorDescriptor.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	// Describe if the body Opens the Umbrella.
	Open bool `xml:"Open,omitempty" json:"Open,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Box struct {

	// Describe the Color of the Box, acceptable values are defined in tt:ColorDescriptor.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	// Describe if the body Lugs the Box.
	Lug bool `xml:"Lug,omitempty" json:"Lug,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Cart struct {

	// Describe the Category of the Cart, acceptable values are defined in bd:CartCategory.
	Category string `xml:"Category,omitempty" json:"Category,omitempty"`

	// Describe the Color of the Cart, acceptable values are defined in tt:ColorDescriptor.
	Color *tt.ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Belonging struct {

	// Describe the Bag of the body,acceptable values are defined in bd:Bag
	Bag *Bag `xml:"Bag,omitempty" json:"Bag,omitempty"`

	// Describe the Umbrella carried by the body,acceptable values are defined in bd:Umbrella.
	Umbrella *Umbrella `xml:"Umbrella,omitempty" json:"Umbrella,omitempty"`

	// Describe if the body Lifts something.
	LiftSomething bool `xml:"LiftSomething,omitempty" json:"LiftSomething,omitempty"`

	// Describe the Box luffed by the body,acceptable values are defined in bd:Box.
	Box *Box `xml:"Box,omitempty" json:"Box,omitempty"`

	// Describe the Cart pushed by the body,acceptable values are defined in bd:Cart.
	Cart *Cart `xml:"Cart,omitempty" json:"Cart,omitempty"`

	// Describe if the body carries the Weapon.
	Weapon bool `xml:"Weapon,omitempty" json:"Weapon,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Behaviour struct {

	// Acceptable values are defined in bd:Smoking.
	Smoking string `xml:"Smoking,omitempty" json:"Smoking,omitempty"`

	// Acceptable values are defined in bd:UsingMobile.
	UsingMobile string `xml:"UsingMobile,omitempty" json:"UsingMobile,omitempty"`

	// Describe the activity of the body, Acceptable values are defined in bd:HumanActivity.
	Activity string `xml:"Activity,omitempty" json:"Activity,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type HumanBody struct {

	// Describe the body metric of the body.
	BodyMetric *BodyMetric `xml:"BodyMetric,omitempty" json:"BodyMetric,omitempty"`

	// Describe the Clothing of the body.
	Clothing *Clothing `xml:"Clothing,omitempty" json:"Clothing,omitempty"`

	// Describe the Belonging of the body.
	Belonging *Belonging `xml:"Belonging,omitempty" json:"Belonging,omitempty"`

	// Describe the Behaviour of the body.
	Behaviour *Behaviour `xml:"Behaviour,omitempty" json:"Behaviour,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}
