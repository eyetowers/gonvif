// Code generated by gowsdl DO NOT EDIT.

package wsdl

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"

	tt "github.com/eyetowers/gonvif/pkg/generated/onvif/www_onvif_org/ver10/schema"
)

// against "unused imports"
var _ time.Time
var _ xml.Name
var _ context.Context
var _ soap.SOAPEnvelope

// Describes standard Imaging Preset types, used to facilitate Multi-language support and client display.
// "Custom" Type shall be used when Imaging Preset Name does not match any of the types included in the standard classification.
//

type ImagingPresetType string

const (
	ImagingPresetTypeCustom ImagingPresetType = "Custom"

	ImagingPresetTypeClearWeather ImagingPresetType = "ClearWeather"

	ImagingPresetTypeCloudy ImagingPresetType = "Cloudy"

	ImagingPresetTypeFog ImagingPresetType = "Fog"

	ImagingPresetTypeRain ImagingPresetType = "Rain"

	ImagingPresetTypeSnowing ImagingPresetType = "Snowing"

	ImagingPresetTypeSnow ImagingPresetType = "Snow"

	ImagingPresetTypeWDR ImagingPresetType = "WDR"

	ImagingPresetTypeShade ImagingPresetType = "Shade"

	ImagingPresetTypeNight ImagingPresetType = "Night"

	ImagingPresetTypeIndoor ImagingPresetType = "Indoor"

	ImagingPresetTypeFluorescent ImagingPresetType = "Fluorescent"

	ImagingPresetTypeIncandescent ImagingPresetType = "Incandescent"

	ImagingPresetTypeSodiumNatrium ImagingPresetType = "Sodium(Natrium)"

	ImagingPresetTypeSunriseHorizon ImagingPresetType = "Sunrise(Horizon)"

	ImagingPresetTypeSunsetRear ImagingPresetType = "Sunset(Rear)"

	ImagingPresetTypeExtremeHot ImagingPresetType = "ExtremeHot"

	ImagingPresetTypeExtremeCold ImagingPresetType = "ExtremeCold"

	ImagingPresetTypeUnderwater ImagingPresetType = "Underwater"

	ImagingPresetTypeCloseUp ImagingPresetType = "CloseUp"

	ImagingPresetTypeMotion ImagingPresetType = "Motion"

	ImagingPresetTypeFlickerFree50 ImagingPresetType = "FlickerFree50"

	ImagingPresetTypeFlickerFree60 ImagingPresetType = "FlickerFree60"
)

type GetServiceCapabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetServiceCapabilities" json:"-"`
}

type GetServiceCapabilitiesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetServiceCapabilitiesResponse" json:"-"`

	// The capabilities for the imaging service is returned in the Capabilities element.
	Capabilities *Capabilities `xml:"Capabilities,omitempty" json:"Capabilities,omitempty"`
}

type GetImagingSettings struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetImagingSettings" json:"-"`

	//
	// Reference token to the VideoSource for which the ImagingSettings.
	//
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`
}

type GetImagingSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetImagingSettingsResponse" json:"-"`

	//
	// ImagingSettings for the VideoSource that was requested.
	//
	ImagingSettings *tt.ImagingSettings20 `xml:"ImagingSettings,omitempty" json:"ImagingSettings,omitempty"`
}

type SetImagingSettings struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl SetImagingSettings" json:"-"`

	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`

	ImagingSettings *tt.ImagingSettings20 `xml:"ImagingSettings,omitempty" json:"ImagingSettings,omitempty"`

	ForcePersistence bool `xml:"ForcePersistence,omitempty" json:"ForcePersistence,omitempty"`
}

type SetImagingSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl SetImagingSettingsResponse" json:"-"`
}

type GetOptions struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetOptions" json:"-"`

	//
	// Reference token to the VideoSource for which the imaging parameter options are requested.
	//
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`
}

type GetOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetOptionsResponse" json:"-"`

	//
	// Valid ranges for the imaging parameters that are categorized as device specific.
	//
	ImagingOptions *tt.ImagingOptions20 `xml:"ImagingOptions,omitempty" json:"ImagingOptions,omitempty"`
}

type Move struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl Move" json:"-"`

	//
	// Reference to the VideoSource for the requested move (focus) operation.
	//
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`

	//
	// Content of the requested move (focus) operation.
	//
	Focus *tt.FocusMove `xml:"Focus,omitempty" json:"Focus,omitempty"`
}

type MoveResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl MoveResponse" json:"-"`
}

type GetMoveOptions struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetMoveOptions" json:"-"`

	//
	// Reference token to the VideoSource for the requested move options.
	//
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`
}

type GetMoveOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetMoveOptionsResponse" json:"-"`

	//
	// Valid ranges for the focus lens move options.
	//
	MoveOptions *tt.MoveOptions20 `xml:"MoveOptions,omitempty" json:"MoveOptions,omitempty"`
}

type Stop struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl Stop" json:"-"`

	//
	// Reference token to the VideoSource where the focus movement should be stopped.
	//
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`
}

type StopResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl StopResponse" json:"-"`
}

type GetStatus struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetStatus" json:"-"`

	//
	// Reference token to the VideoSource where the imaging status should be requested.
	//
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`
}

type GetStatusResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetStatusResponse" json:"-"`

	//
	// Requested imaging status.
	//
	Status *tt.ImagingStatus20 `xml:"Status,omitempty" json:"Status,omitempty"`
}

type GetPresets struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetPresets" json:"-"`

	//
	// A reference to the VideoSource where the operation should take place.
	//
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`
}

type GetPresetsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetPresetsResponse" json:"-"`

	//
	// List of Imaging Presets which are available for the requested VideoSource.
	//
	Preset []*ImagingPreset `xml:"Preset,omitempty" json:"Preset,omitempty"`
}

type GetCurrentPreset struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetCurrentPreset" json:"-"`

	// Reference token to the VideoSource where the current Imaging Preset should be requested.
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`
}

type GetCurrentPresetResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl GetCurrentPresetResponse" json:"-"`

	// Current Imaging Preset in use for the specified Video Source.
	Preset *ImagingPreset `xml:"Preset,omitempty" json:"Preset,omitempty"`
}

type SetCurrentPreset struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl SetCurrentPreset" json:"-"`

	//
	// Reference token to the VideoSource to which the specified Imaging Preset should be applied.
	//
	VideoSourceToken *tt.ReferenceToken `xml:"VideoSourceToken,omitempty" json:"VideoSourceToken,omitempty"`

	// Reference token to the Imaging Preset to be applied to the specified Video Source.
	PresetToken *tt.ReferenceToken `xml:"PresetToken,omitempty" json:"PresetToken,omitempty"`
}

type SetCurrentPresetResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl SetCurrentPresetResponse" json:"-"`
}

type Capabilities struct {
	Items []string `xml:",any" json:"items,omitempty"`

	// Indicates whether or not Image Stabilization feature is supported.
	// The use of this capability is deprecated, a client should use GetOption to find out if image stabilization is supported.

	ImageStabilization bool `xml:"http://www.onvif.org/ver20/imaging/wsdl ImageStabilization,attr,omitempty" json:"ImageStabilization,omitempty"`

	// Indicates whether or not Imaging Presets feature is supported.

	Presets bool `xml:"http://www.onvif.org/ver20/imaging/wsdl Presets,attr,omitempty" json:"Presets,omitempty"`

	// Indicates whether or not imaging preset settings can be updated.

	AdaptablePreset bool `xml:"http://www.onvif.org/ver20/imaging/wsdl AdaptablePreset,attr,omitempty" json:"AdaptablePreset,omitempty"`
}

type ImagingPreset struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver20/imaging/wsdl Preset" json:"-"`

	// Human readable name of the Imaging Preset.
	Name *tt.Name `xml:"Name,omitempty" json:"Name,omitempty"`

	// Unique identifier of this Imaging Preset.

	Token *tt.ReferenceToken `xml:"token,attr,omitempty" json:"token,omitempty"`

	// Indicates Imaging Preset Type. Use timg:ImagingPresetType.
	// Used for multi-language support and display.

	Type string `xml:"http://www.onvif.org/ver20/imaging/wsdl type,attr,omitempty" json:"type,omitempty"`
}

type ImagingPort interface {

	/* Returns the capabilities of the imaging service. The result is returned in a typed answer. */
	GetServiceCapabilities(request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error)

	GetServiceCapabilitiesContext(ctx context.Context, request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error)

	/* Get the ImagingConfiguration for the requested VideoSource. */
	GetImagingSettings(request *GetImagingSettings) (*GetImagingSettingsResponse, error)

	GetImagingSettingsContext(ctx context.Context, request *GetImagingSettings) (*GetImagingSettingsResponse, error)

	/* Set the ImagingConfiguration for the requested VideoSource. */
	SetImagingSettings(request *SetImagingSettings) (*SetImagingSettingsResponse, error)

	SetImagingSettingsContext(ctx context.Context, request *SetImagingSettings) (*SetImagingSettingsResponse, error)

	/* This operation gets the valid ranges for the imaging parameters that have device specific ranges.
	This command is mandatory for all device implementing the imaging service. The command returns all supported parameters and their ranges
	such that these can be applied to the SetImagingSettings command.
	For read-only parameters which cannot be modified via the SetImagingSettings command only a single option or identical Min and Max values
	is provided. */
	GetOptions(request *GetOptions) (*GetOptionsResponse, error)

	GetOptionsContext(ctx context.Context, request *GetOptions) (*GetOptionsResponse, error)

	/* The Move command moves the focus lens in an absolute, a relative or in a continuous manner from its current position.
	The speed argument is optional for absolute and relative control, but required for continuous. If no speed argument is used, the default speed is used.
	Focus adjustments through this operation will turn off the autofocus. A device with support for remote focus control should support absolute,
	relative or continuous control through the Move operation. The supported MoveOpions are signalled via the GetMoveOptions command.
	At least one focus control capability is required for this operation to be functional.
	The move operation contains the following commands:
		 – Requires position parameter and optionally takes a speed argument. A unitless type is used by default for focus positioning and speed. Optionally, if supported, the position may be requested in m-1 units.
		 – Requires distance parameter and optionally takes a speed argument. Negative distance means negative direction.
	 – Requires a speed argument. Negative speed argument means negative direction.
	*/
	Move(request *Move) (*MoveResponse, error)

	MoveContext(ctx context.Context, request *Move) (*MoveResponse, error)

	/* Imaging move operation options supported for the Video source. */
	GetMoveOptions(request *GetMoveOptions) (*GetMoveOptionsResponse, error)

	GetMoveOptionsContext(ctx context.Context, request *GetMoveOptions) (*GetMoveOptionsResponse, error)

	/* The Stop command stops all ongoing focus movements of the lense. A device with support for remote focus control as signalled via
	the GetMoveOptions supports this command. The operation will not affect ongoing autofocus operation. */
	Stop(request *Stop) (*StopResponse, error)

	StopContext(ctx context.Context, request *Stop) (*StopResponse, error)

	/* Via this command the current status of the Move operation can be requested. Supported for this command is available if the support for the Move operation is signalled via GetMoveOptions. */
	GetStatus(request *GetStatus) (*GetStatusResponse, error)

	GetStatusContext(ctx context.Context, request *GetStatus) (*GetStatusResponse, error)

	/* Via this command the list of available Imaging Presets can be requested. */
	GetPresets(request *GetPresets) (*GetPresetsResponse, error)

	GetPresetsContext(ctx context.Context, request *GetPresets) (*GetPresetsResponse, error)

	/* Via this command the last Imaging Preset applied can be requested.
	If the camera configuration does not match any of the existing Imaging Presets, the output of GetCurrentPreset shall be Empty.
	GetCurrentPreset shall return 0 if Imaging Presets are not supported by the Video Source. */
	GetCurrentPreset(request *GetCurrentPreset) (*GetCurrentPresetResponse, error)

	GetCurrentPresetContext(ctx context.Context, request *GetCurrentPreset) (*GetCurrentPresetResponse, error)

	/* The SetCurrentPreset command shall request a given Imaging Preset to be applied to the specified Video Source.
	SetCurrentPreset shall only be available for Video Sources with Imaging Presets Capability.
	Imaging Presets are defined by the Manufacturer, and offered as a tool to simplify Imaging Settings adjustments for specific scene content.
	When the new Imaging Preset is applied by SetCurrentPreset, the Device shall adjust the Video Source settings to match those defined by the specified Imaging Preset. */
	SetCurrentPreset(request *SetCurrentPreset) (*SetCurrentPresetResponse, error)

	SetCurrentPresetContext(ctx context.Context, request *SetCurrentPreset) (*SetCurrentPresetResponse, error)
}

type imagingPort struct {
	client *soap.Client
}

func NewImagingPort(client *soap.Client) ImagingPort {
	return &imagingPort{
		client: client,
	}
}

func (service *imagingPort) GetServiceCapabilitiesContext(ctx context.Context, request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error) {
	response := new(GetServiceCapabilitiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) GetServiceCapabilities(request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error) {
	return service.GetServiceCapabilitiesContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) GetImagingSettingsContext(ctx context.Context, request *GetImagingSettings) (*GetImagingSettingsResponse, error) {
	response := new(GetImagingSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) GetImagingSettings(request *GetImagingSettings) (*GetImagingSettingsResponse, error) {
	return service.GetImagingSettingsContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) SetImagingSettingsContext(ctx context.Context, request *SetImagingSettings) (*SetImagingSettingsResponse, error) {
	response := new(SetImagingSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) SetImagingSettings(request *SetImagingSettings) (*SetImagingSettingsResponse, error) {
	return service.SetImagingSettingsContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) GetOptionsContext(ctx context.Context, request *GetOptions) (*GetOptionsResponse, error) {
	response := new(GetOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) GetOptions(request *GetOptions) (*GetOptionsResponse, error) {
	return service.GetOptionsContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) MoveContext(ctx context.Context, request *Move) (*MoveResponse, error) {
	response := new(MoveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) Move(request *Move) (*MoveResponse, error) {
	return service.MoveContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) GetMoveOptionsContext(ctx context.Context, request *GetMoveOptions) (*GetMoveOptionsResponse, error) {
	response := new(GetMoveOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) GetMoveOptions(request *GetMoveOptions) (*GetMoveOptionsResponse, error) {
	return service.GetMoveOptionsContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) StopContext(ctx context.Context, request *Stop) (*StopResponse, error) {
	response := new(StopResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) Stop(request *Stop) (*StopResponse, error) {
	return service.StopContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) GetStatusContext(ctx context.Context, request *GetStatus) (*GetStatusResponse, error) {
	response := new(GetStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) GetStatus(request *GetStatus) (*GetStatusResponse, error) {
	return service.GetStatusContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) GetPresetsContext(ctx context.Context, request *GetPresets) (*GetPresetsResponse, error) {
	response := new(GetPresetsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) GetPresets(request *GetPresets) (*GetPresetsResponse, error) {
	return service.GetPresetsContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) GetCurrentPresetContext(ctx context.Context, request *GetCurrentPreset) (*GetCurrentPresetResponse, error) {
	response := new(GetCurrentPresetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) GetCurrentPreset(request *GetCurrentPreset) (*GetCurrentPresetResponse, error) {
	return service.GetCurrentPresetContext(
		context.Background(),
		request,
	)
}

func (service *imagingPort) SetCurrentPresetContext(ctx context.Context, request *SetCurrentPreset) (*SetCurrentPresetResponse, error) {
	response := new(SetCurrentPresetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *imagingPort) SetCurrentPreset(request *SetCurrentPreset) (*SetCurrentPresetResponse, error) {
	return service.SetCurrentPresetContext(
		context.Background(),
		request,
	)
}
