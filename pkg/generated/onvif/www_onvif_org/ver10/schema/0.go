// Code generated by gowsdl DO NOT EDIT.

package schema

import (
	"context"
	"encoding/xml"
	"github.com/eyetowers/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name
var _ context.Context
var _ soap.SOAPEnvelope

// Unique identifier for a physical or logical resource.
// Tokens should be assigned such that they are unique within a device. Tokens must be at least unique within its class.
// Length up to 64 characters. Token may be extended by intermediate terminal with adding prefix to make it global unique.
// The length should be within 36 characters for generating at local device. See "Remote Token" section in Resource Query specification.

type ReferenceToken string

type MoveStatus string

const (
	MoveStatusIDLE MoveStatus = "IDLE"

	MoveStatusMOVING MoveStatus = "MOVING"

	MoveStatusUNKNOWN MoveStatus = "UNKNOWN"
)

type Entity string

const (
	EntityDevice Entity = "Device"

	EntityVideoSource Entity = "VideoSource"

	EntityAudioSource Entity = "AudioSource"
)

type IntRange struct {
	Min int32 `xml:"Min,omitempty" json:"Min,omitempty"`

	Max int32 `xml:"Max,omitempty" json:"Max,omitempty"`
}

type Vector2D struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/schema PanTilt" json:"-"`

	X float32 `xml:"x,attr,omitempty" json:"x,omitempty"`

	Y float32 `xml:"y,attr,omitempty" json:"y,omitempty"`

	//
	// Pan/tilt coordinate space selector. The following options are defined:
	//

	Space string `xml:"space,attr,omitempty" json:"space,omitempty"`
}

type Vector1D struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/schema Zoom" json:"-"`

	X float32 `xml:"x,attr,omitempty" json:"x,omitempty"`

	//
	// Zoom coordinate space selector. The following options are defined:
	//

	Space string `xml:"space,attr,omitempty" json:"space,omitempty"`
}

type PTZVector struct {

	// Pan and tilt position. The x component corresponds to pan and the y component to tilt.
	PanTilt *Vector2D `xml:"PanTilt,omitempty" json:"PanTilt,omitempty"`

	//
	// A zoom position.
	//
	Zoom *Vector1D `xml:"Zoom,omitempty" json:"Zoom,omitempty"`
}

type PTZStatus struct {

	//
	// Specifies the absolute position of the PTZ unit together with the Space references. The default absolute spaces of the corresponding PTZ configuration MUST be referenced within the Position element.
	//
	Position *PTZVector `xml:"Position,omitempty" json:"Position,omitempty"`

	//
	// Indicates if the Pan/Tilt/Zoom device unit is currently moving, idle or in an unknown state.
	//
	MoveStatus *PTZMoveStatus `xml:"MoveStatus,omitempty" json:"MoveStatus,omitempty"`

	//
	// States a current PTZ error.
	//
	Error string `xml:"Error,omitempty" json:"Error,omitempty"`

	//
	// Specifies the UTC time when this status was generated.
	//
	UtcTime soap.XSDDateTime `xml:"UtcTime,omitempty" json:"UtcTime,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type PTZMoveStatus struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/schema MoveStatus" json:"-"`

	PanTilt *MoveStatus `xml:"PanTilt,omitempty" json:"PanTilt,omitempty"`

	Zoom *MoveStatus `xml:"Zoom,omitempty" json:"Zoom,omitempty"`
}

type Vector struct {
	X float32 `xml:"x,attr,omitempty" json:"x,omitempty"`

	Y float32 `xml:"y,attr,omitempty" json:"y,omitempty"`
}

type Rectangle struct {
	Bottom float32 `xml:"bottom,attr,omitempty" json:"bottom,omitempty"`

	Top float32 `xml:"top,attr,omitempty" json:"top,omitempty"`

	Right float32 `xml:"right,attr,omitempty" json:"right,omitempty"`

	Left float32 `xml:"left,attr,omitempty" json:"left,omitempty"`
}

type Polygon struct {
	Point []*Vector `xml:"Point,omitempty" json:"Point,omitempty"`
}

type Color struct {
	X float32 `xml:"X,attr,omitempty" json:"X,omitempty"`

	Y float32 `xml:"Y,attr,omitempty" json:"Y,omitempty"`

	Z float32 `xml:"Z,attr,omitempty" json:"Z,omitempty"`

	//
	// Acceptable values:
	//
	// If the Colorspace attribute is absent and not defined on higher level, YCbCr is implied.
	//
	// Deprecated values:
	//
	//

	Colorspace string `xml:"Colorspace,attr,omitempty" json:"Colorspace,omitempty"`
}

type ColorCovariance struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/schema Covariance" json:"-"`

	XX float32 `xml:"XX,attr,omitempty" json:"XX,omitempty"`

	YY float32 `xml:"YY,attr,omitempty" json:"YY,omitempty"`

	ZZ float32 `xml:"ZZ,attr,omitempty" json:"ZZ,omitempty"`

	XY float32 `xml:"XY,attr,omitempty" json:"XY,omitempty"`

	XZ float32 `xml:"XZ,attr,omitempty" json:"XZ,omitempty"`

	YZ float32 `xml:"YZ,attr,omitempty" json:"YZ,omitempty"`

	//
	// Acceptable values are the same as in tt:Color.
	//

	Colorspace string `xml:"Colorspace,attr,omitempty" json:"Colorspace,omitempty"`
}

type ColorDescriptor struct {
	ColorCluster []struct {
		Color *Color `xml:"Color,omitempty" json:"Color,omitempty"`

		Weight float32 `xml:"Weight,omitempty" json:"Weight,omitempty"`

		Covariance *ColorCovariance `xml:"Covariance,omitempty" json:"Covariance,omitempty"`
	} `xml:"ColorCluster,omitempty" json:"ColorCluster,omitempty"`

	Extension string `xml:"Extension,omitempty" json:"Extension,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type Transformation struct {
	Translate *Vector `xml:"Translate,omitempty" json:"Translate,omitempty"`

	Scale *Vector `xml:"Scale,omitempty" json:"Scale,omitempty"`

	Extension *TransformationExtension `xml:"Extension,omitempty" json:"Extension,omitempty"`
}

type TransformationExtension struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/schema Extension" json:"-"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type GeoLocation struct {
	Items []string `xml:",any" json:"items,omitempty"`

	// East west location as angle.

	Lon float64 `xml:"lon,attr,omitempty" json:"lon,omitempty"`

	// North south location as angle.

	Lat float64 `xml:"lat,attr,omitempty" json:"lat,omitempty"`

	// Hight in meters above sea level.

	Elevation float32 `xml:"elevation,attr,omitempty" json:"elevation,omitempty"`
}

type GeoOrientation struct {
	Items []string `xml:",any" json:"items,omitempty"`

	// Rotation around the x axis.

	Roll float32 `xml:"roll,attr,omitempty" json:"roll,omitempty"`

	// Rotation around the y axis.

	Pitch float32 `xml:"pitch,attr,omitempty" json:"pitch,omitempty"`

	// Rotation around the z axis.

	Yaw float32 `xml:"yaw,attr,omitempty" json:"yaw,omitempty"`
}

type LocalLocation struct {
	Items []string `xml:",any" json:"items,omitempty"`

	// East west location as angle.

	X float32 `xml:"x,attr,omitempty" json:"x,omitempty"`

	// North south location as angle.

	Y float32 `xml:"y,attr,omitempty" json:"y,omitempty"`

	// Offset in meters from the sea level.

	Z float32 `xml:"z,attr,omitempty" json:"z,omitempty"`
}

type LocalOrientation struct {
	Items []string `xml:",any" json:"items,omitempty"`

	// Rotation around the y axis.

	Pan float32 `xml:"pan,attr,omitempty" json:"pan,omitempty"`

	// Rotation around the z axis.

	Tilt float32 `xml:"tilt,attr,omitempty" json:"tilt,omitempty"`

	// Rotation around the x axis.

	Roll float32 `xml:"roll,attr,omitempty" json:"roll,omitempty"`
}

type LocationEntity struct {

	// Location on earth.
	GeoLocation *GeoLocation `xml:"GeoLocation,omitempty" json:"GeoLocation,omitempty"`

	// Orientation relative to earth.
	GeoOrientation *GeoOrientation `xml:"GeoOrientation,omitempty" json:"GeoOrientation,omitempty"`

	// Indoor location offset.
	LocalLocation *LocalLocation `xml:"LocalLocation,omitempty" json:"LocalLocation,omitempty"`

	// Indoor orientation offset.
	LocalOrientation *LocalOrientation `xml:"LocalOrientation,omitempty" json:"LocalOrientation,omitempty"`

	// Entity type the entry refers to, use a value from the tt:Entity enumeration.

	Entity string `xml:"Entity,attr,omitempty" json:"Entity,omitempty"`

	// Optional entity token.

	Token *ReferenceToken `xml:"Token,attr,omitempty" json:"Token,omitempty"`

	// If this value is true the entity cannot be deleted.

	Fixed bool `xml:"Fixed,attr,omitempty" json:"Fixed,omitempty"`

	// Optional reference to the XAddr of another devices DeviceManagement service.

	GeoSource string `xml:"GeoSource,attr,omitempty" json:"GeoSource,omitempty"`

	// If set the geo location is obtained internally.

	AutoGeo bool `xml:"AutoGeo,attr,omitempty" json:"AutoGeo,omitempty"`
}
