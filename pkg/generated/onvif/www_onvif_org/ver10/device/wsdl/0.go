// Code generated by gowsdl DO NOT EDIT.

package wsdl

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"

	tt "github.com/eyetowers/gonvif/pkg/generated/onvif/www_onvif_org/ver10/schema"
)

// against "unused imports"
var _ time.Time
var _ xml.Name
var _ context.Context
var _ soap.SOAPEnvelope

type AutoGeoModes string

const (

	// Automatic adjustment of the device location.
	AutoGeoModesLocation AutoGeoModes = "Location"

	// Automatic adjustment of the device orientation relative to the compass also called yaw.
	AutoGeoModesHeading AutoGeoModes = "Heading"

	// Automatic adjustment of the deviation from the horizon also called pitch and roll.
	AutoGeoModesLeveling AutoGeoModes = "Leveling"
)

type StorageType string

const (

	// NFS protocol
	StorageTypeNFS StorageType = "NFS"

	// CIFS protocol
	StorageTypeCIFS StorageType = "CIFS"

	// CDMI protocol
	StorageTypeCDMI StorageType = "CDMI"

	// FTP protocol
	StorageTypeFTP StorageType = "FTP"
)

type GetServices struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetServices" json:"-"`

	// Indicates if the service capabilities (untyped) should be included in the response.
	IncludeCapability bool `xml:"IncludeCapability" json:"IncludeCapability,omitempty"`
}

type GetServicesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetServicesResponse" json:"-"`

	// Each Service element contains information about one service.
	Service []*Service `xml:"Service,omitempty" json:"Service,omitempty"`
}

type GetServiceCapabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetServiceCapabilities" json:"-"`
}

type GetServiceCapabilitiesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetServiceCapabilitiesResponse" json:"-"`

	// The capabilities for the device service is returned in the Capabilities element.
	Capabilities *DeviceServiceCapabilities `xml:"Capabilities,omitempty" json:"Capabilities,omitempty"`
}

type Capabilities DeviceServiceCapabilities

type GetDeviceInformation struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDeviceInformation" json:"-"`
}

type GetDeviceInformationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDeviceInformationResponse" json:"-"`

	// The manufactor of the device.
	Manufacturer string `xml:"Manufacturer,omitempty" json:"Manufacturer,omitempty"`

	// The device model.
	Model string `xml:"Model,omitempty" json:"Model,omitempty"`

	// The firmware version in the device.
	FirmwareVersion string `xml:"FirmwareVersion,omitempty" json:"FirmwareVersion,omitempty"`

	// The serial number of the device.
	SerialNumber string `xml:"SerialNumber,omitempty" json:"SerialNumber,omitempty"`

	// The hardware ID of the device.
	HardwareId string `xml:"HardwareId,omitempty" json:"HardwareId,omitempty"`
}

type SetSystemDateAndTime struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetSystemDateAndTime" json:"-"`

	// Defines if the date and time is set via NTP or manually.
	DateTimeType *tt.SetDateTimeType `xml:"DateTimeType,omitempty" json:"DateTimeType,omitempty"`

	// Automatically adjust Daylight savings if defined in TimeZone.
	DaylightSavings bool `xml:"DaylightSavings,omitempty" json:"DaylightSavings,omitempty"`

	// The time zone in POSIX 1003.1 format
	TimeZone *tt.TimeZone `xml:"TimeZone,omitempty" json:"TimeZone,omitempty"`

	// Date and time in UTC. If time is obtained via NTP, UTCDateTime has no meaning
	UTCDateTime *tt.DateTime `xml:"UTCDateTime,omitempty" json:"UTCDateTime,omitempty"`
}

type SetSystemDateAndTimeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetSystemDateAndTimeResponse" json:"-"`
}

type GetSystemDateAndTime struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemDateAndTime" json:"-"`
}

type GetSystemDateAndTimeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemDateAndTimeResponse" json:"-"`

	// Contains information whether system date and time are set manually or by NTP, daylight savings is on or off, time zone in POSIX 1003.1 format and system date and time in UTC and also local system date and time.
	SystemDateAndTime *tt.SystemDateTime `xml:"SystemDateAndTime,omitempty" json:"SystemDateAndTime,omitempty"`
}

type SetSystemFactoryDefault struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetSystemFactoryDefault" json:"-"`

	// Specifies the factory default action type.
	FactoryDefault *tt.FactoryDefaultType `xml:"FactoryDefault,omitempty" json:"FactoryDefault,omitempty"`
}

type SetSystemFactoryDefaultResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetSystemFactoryDefaultResponse" json:"-"`
}

type UpgradeSystemFirmware struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl UpgradeSystemFirmware" json:"-"`

	Firmware *tt.AttachmentData `xml:"Firmware,omitempty" json:"Firmware,omitempty"`
}

type UpgradeSystemFirmwareResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl UpgradeSystemFirmwareResponse" json:"-"`

	Message string `xml:"Message,omitempty" json:"Message,omitempty"`
}

type SystemReboot struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SystemReboot" json:"-"`
}

type SystemRebootResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SystemRebootResponse" json:"-"`

	// Contains the reboot message sent by the device.
	Message string `xml:"Message,omitempty" json:"Message,omitempty"`
}

type RestoreSystem struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl RestoreSystem" json:"-"`

	BackupFiles []*tt.BackupFile `xml:"BackupFiles,omitempty" json:"BackupFiles,omitempty"`
}

type RestoreSystemResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl RestoreSystemResponse" json:"-"`
}

type GetSystemBackup struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemBackup" json:"-"`
}

type GetSystemBackupResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemBackupResponse" json:"-"`

	BackupFiles []*tt.BackupFile `xml:"BackupFiles,omitempty" json:"BackupFiles,omitempty"`
}

type GetSystemSupportInformation struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemSupportInformation" json:"-"`
}

type GetSystemSupportInformationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemSupportInformationResponse" json:"-"`

	// Contains the arbitary device diagnostics information.
	SupportInformation *tt.SupportInformation `xml:"SupportInformation,omitempty" json:"SupportInformation,omitempty"`
}

type GetSystemLog struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemLog" json:"-"`

	// Specifies the type of system log to get.
	LogType *tt.SystemLogType `xml:"LogType,omitempty" json:"LogType,omitempty"`
}

type GetSystemLogResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemLogResponse" json:"-"`

	// Contains the system log information.
	SystemLog *tt.SystemLog `xml:"SystemLog,omitempty" json:"SystemLog,omitempty"`
}

type GetScopes struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetScopes" json:"-"`
}

type GetScopesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetScopesResponse" json:"-"`

	// Contains a list of URI definining the device scopes. Scope parameters can be of two types: fixed and configurable. Fixed parameters can not be altered.
	Scopes []*tt.Scope `xml:"Scopes,omitempty" json:"Scopes,omitempty"`
}

type SetScopes struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetScopes" json:"-"`

	// Contains a list of scope parameters that will replace all existing configurable scope parameters.
	Scopes []string `xml:"Scopes,omitempty" json:"Scopes,omitempty"`
}

type SetScopesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetScopesResponse" json:"-"`
}

type AddScopes struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl AddScopes" json:"-"`

	// Contains a list of new configurable scope parameters that will be added to the existing configurable scope.
	ScopeItem []string `xml:"ScopeItem,omitempty" json:"ScopeItem,omitempty"`
}

type AddScopesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl AddScopesResponse" json:"-"`
}

type RemoveScopes struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl RemoveScopes" json:"-"`

	// Contains a list of URIs that should be removed from the device scope.
	// Note that the response message always will match the request or an error will be returned. The use of the response is for that reason deprecated.
	//
	ScopeItem []string `xml:"ScopeItem,omitempty" json:"ScopeItem,omitempty"`
}

type RemoveScopesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl RemoveScopesResponse" json:"-"`

	// Contains a list of URIs that has been removed from the device scope
	ScopeItem []string `xml:"ScopeItem,omitempty" json:"ScopeItem,omitempty"`
}

type GetDiscoveryMode struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDiscoveryMode" json:"-"`
}

type GetDiscoveryModeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDiscoveryModeResponse" json:"-"`

	//
	// Indicator of discovery mode: Discoverable, NonDiscoverable.
	//
	DiscoveryMode *tt.DiscoveryMode `xml:"DiscoveryMode,omitempty" json:"DiscoveryMode,omitempty"`
}

type SetDiscoveryMode struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDiscoveryMode" json:"-"`

	//
	// Indicator of discovery mode: Discoverable, NonDiscoverable.
	//
	DiscoveryMode *tt.DiscoveryMode `xml:"DiscoveryMode,omitempty" json:"DiscoveryMode,omitempty"`
}

type SetDiscoveryModeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDiscoveryModeResponse" json:"-"`
}

type GetRemoteDiscoveryMode struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetRemoteDiscoveryMode" json:"-"`
}

type GetRemoteDiscoveryModeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetRemoteDiscoveryModeResponse" json:"-"`

	//
	// Indicator of discovery mode: Discoverable, NonDiscoverable.
	//
	RemoteDiscoveryMode *tt.DiscoveryMode `xml:"RemoteDiscoveryMode,omitempty" json:"RemoteDiscoveryMode,omitempty"`
}

type SetRemoteDiscoveryMode struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetRemoteDiscoveryMode" json:"-"`

	//
	// Indicator of discovery mode: Discoverable, NonDiscoverable.
	//
	RemoteDiscoveryMode *tt.DiscoveryMode `xml:"RemoteDiscoveryMode,omitempty" json:"RemoteDiscoveryMode,omitempty"`
}

type SetRemoteDiscoveryModeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetRemoteDiscoveryModeResponse" json:"-"`
}

type GetDPAddresses struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDPAddresses" json:"-"`
}

type GetDPAddressesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDPAddressesResponse" json:"-"`

	DPAddress []*tt.NetworkHost `xml:"DPAddress,omitempty" json:"DPAddress,omitempty"`
}

type SetDPAddresses struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDPAddresses" json:"-"`

	DPAddress []*tt.NetworkHost `xml:"DPAddress,omitempty" json:"DPAddress,omitempty"`
}

type SetDPAddressesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDPAddressesResponse" json:"-"`
}

type GetEndpointReference struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetEndpointReference" json:"-"`
}

type GetEndpointReferenceResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetEndpointReferenceResponse" json:"-"`

	GUID string `xml:"GUID,omitempty" json:"GUID,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type GetRemoteUser struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetRemoteUser" json:"-"`
}

type GetRemoteUserResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetRemoteUserResponse" json:"-"`

	RemoteUser *tt.RemoteUser `xml:"RemoteUser,omitempty" json:"RemoteUser,omitempty"`
}

type SetRemoteUser struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetRemoteUser" json:"-"`

	RemoteUser *tt.RemoteUser `xml:"RemoteUser,omitempty" json:"RemoteUser,omitempty"`
}

type SetRemoteUserResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetRemoteUserResponse" json:"-"`
}

type GetUsers struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetUsers" json:"-"`
}

type GetUsersResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetUsersResponse" json:"-"`

	// Contains a list of the onvif users and following information is included in each entry: username and user level.
	User []*tt.User `xml:"User,omitempty" json:"User,omitempty"`
}

type CreateUsers struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl CreateUsers" json:"-"`

	// Creates new device users and corresponding credentials. Each user entry includes: username, password and user level. Either all users are created successfully or a fault message MUST be returned without creating any user. If trying to create several users with exactly the same username the request is rejected and no users are created. If password is missing, then fault message Too weak password is returned.
	User []*tt.User `xml:"User,omitempty" json:"User,omitempty"`
}

type CreateUsersResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl CreateUsersResponse" json:"-"`
}

type DeleteUsers struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteUsers" json:"-"`

	// Deletes users on an device and there may exist users that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a fault message MUST be returned and no users be deleted. If a username exists multiple times in the request, then a fault message is returned.
	Username []string `xml:"Username,omitempty" json:"Username,omitempty"`
}

type DeleteUsersResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteUsersResponse" json:"-"`
}

type SetUser struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetUser" json:"-"`

	// Updates the credentials for one or several users on an device. Either all change requests are processed successfully or a fault message MUST be returned. If the request contains the same username multiple times, a fault message is returned.
	User []*tt.User `xml:"User,omitempty" json:"User,omitempty"`
}

type SetUserResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetUserResponse" json:"-"`
}

type GetWsdlUrl struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetWsdlUrl" json:"-"`
}

type GetWsdlUrlResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetWsdlUrlResponse" json:"-"`

	WsdlUrl string `xml:"WsdlUrl,omitempty" json:"WsdlUrl,omitempty"`
}

type GetPasswordComplexityOptions struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetPasswordComplexityOptions" json:"-"`
}

type GetPasswordComplexityOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetPasswordComplexityOptionsResponse" json:"-"`

	MinLenRange *tt.IntRange `xml:"MinLenRange,omitempty" json:"MinLenRange,omitempty"`

	UppercaseRange *tt.IntRange `xml:"UppercaseRange,omitempty" json:"UppercaseRange,omitempty"`

	NumberRange *tt.IntRange `xml:"NumberRange,omitempty" json:"NumberRange,omitempty"`

	SpecialCharsRange *tt.IntRange `xml:"SpecialCharsRange,omitempty" json:"SpecialCharsRange,omitempty"`

	BlockUsernameOccurrenceSupported bool `xml:"BlockUsernameOccurrenceSupported,omitempty" json:"BlockUsernameOccurrenceSupported,omitempty"`

	PolicyConfigurationLockSupported bool `xml:"PolicyConfigurationLockSupported,omitempty" json:"PolicyConfigurationLockSupported,omitempty"`
}

type GetPasswordComplexityConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetPasswordComplexityConfiguration" json:"-"`
}

type GetPasswordComplexityConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetPasswordComplexityConfigurationResponse" json:"-"`

	MinLen int32 `xml:"MinLen,omitempty" json:"MinLen,omitempty"`

	Uppercase int32 `xml:"Uppercase,omitempty" json:"Uppercase,omitempty"`

	Number int32 `xml:"Number,omitempty" json:"Number,omitempty"`

	SpecialChars int32 `xml:"SpecialChars,omitempty" json:"SpecialChars,omitempty"`

	BlockUsernameOccurrence bool `xml:"BlockUsernameOccurrence,omitempty" json:"BlockUsernameOccurrence,omitempty"`

	PolicyConfigurationLocked bool `xml:"PolicyConfigurationLocked,omitempty" json:"PolicyConfigurationLocked,omitempty"`
}

type SetPasswordComplexityConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetPasswordComplexityConfiguration" json:"-"`

	MinLen int32 `xml:"MinLen,omitempty" json:"MinLen,omitempty"`

	Uppercase int32 `xml:"Uppercase,omitempty" json:"Uppercase,omitempty"`

	Number int32 `xml:"Number,omitempty" json:"Number,omitempty"`

	SpecialChars int32 `xml:"SpecialChars,omitempty" json:"SpecialChars,omitempty"`

	BlockUsernameOccurrence bool `xml:"BlockUsernameOccurrence,omitempty" json:"BlockUsernameOccurrence,omitempty"`

	PolicyConfigurationLocked bool `xml:"PolicyConfigurationLocked,omitempty" json:"PolicyConfigurationLocked,omitempty"`
}

type SetPasswordComplexityConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetPasswordComplexityConfigurationResponse" json:"-"`
}

type GetPasswordHistoryConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetPasswordHistoryConfiguration" json:"-"`
}

type GetPasswordHistoryConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetPasswordHistoryConfigurationResponse" json:"-"`

	Enabled bool `xml:"Enabled,omitempty" json:"Enabled,omitempty"`

	Length int32 `xml:"Length,omitempty" json:"Length,omitempty"`
}

type SetPasswordHistoryConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetPasswordHistoryConfiguration" json:"-"`

	Enabled bool `xml:"Enabled,omitempty" json:"Enabled,omitempty"`

	Length int32 `xml:"Length,omitempty" json:"Length,omitempty"`
}

type SetPasswordHistoryConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetPasswordHistoryConfigurationResponse" json:"-"`
}

type GetAuthFailureWarningOptions struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetAuthFailureWarningOptions" json:"-"`
}

type GetAuthFailureWarningOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetAuthFailureWarningOptionsResponse" json:"-"`

	MonitorPeriodRange *tt.IntRange `xml:"MonitorPeriodRange,omitempty" json:"MonitorPeriodRange,omitempty"`

	AuthFailureRange *tt.IntRange `xml:"AuthFailureRange,omitempty" json:"AuthFailureRange,omitempty"`
}

type GetAuthFailureWarningConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetAuthFailureWarningConfiguration" json:"-"`
}

type GetAuthFailureWarningConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetAuthFailureWarningConfigurationResponse" json:"-"`

	Enabled bool `xml:"Enabled,omitempty" json:"Enabled,omitempty"`

	MonitorPeriod int32 `xml:"MonitorPeriod,omitempty" json:"MonitorPeriod,omitempty"`

	MaxAuthFailures int32 `xml:"MaxAuthFailures,omitempty" json:"MaxAuthFailures,omitempty"`
}

type SetAuthFailureWarningConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetAuthFailureWarningConfiguration" json:"-"`

	Enabled bool `xml:"Enabled,omitempty" json:"Enabled,omitempty"`

	MonitorPeriod int32 `xml:"MonitorPeriod,omitempty" json:"MonitorPeriod,omitempty"`

	MaxAuthFailures int32 `xml:"MaxAuthFailures,omitempty" json:"MaxAuthFailures,omitempty"`
}

type SetAuthFailureWarningConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetAuthFailureWarningConfigurationResponse" json:"-"`
}

type GetCapabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCapabilities" json:"-"`

	//
	// List of categories to retrieve capability information on.
	//
	Category []*tt.CapabilityCategory `xml:"Category,omitempty" json:"Category,omitempty"`
}

type GetCapabilitiesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCapabilitiesResponse" json:"-"`

	//
	// Capability information.
	//
	Capabilities *tt.Capabilities `xml:"Capabilities,omitempty" json:"Capabilities,omitempty"`
}

type GetHostname struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetHostname" json:"-"`
}

type GetHostnameResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetHostnameResponse" json:"-"`

	// Contains the hostname information.
	HostnameInformation *tt.HostnameInformation `xml:"HostnameInformation,omitempty" json:"HostnameInformation,omitempty"`
}

type SetHostname struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetHostname" json:"-"`

	// The hostname to set.
	Name string `xml:"Name,omitempty" json:"Name,omitempty"`
}

type SetHostnameResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetHostnameResponse" json:"-"`
}

type SetHostnameFromDHCP struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetHostnameFromDHCP" json:"-"`

	// True if the hostname shall be obtained via DHCP.
	FromDHCP bool `xml:"FromDHCP,omitempty" json:"FromDHCP,omitempty"`
}

type SetHostnameFromDHCPResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetHostnameFromDHCPResponse" json:"-"`

	//
	// Indicates whether or not a reboot is required after configuration updates.
	//
	RebootNeeded bool `xml:"RebootNeeded,omitempty" json:"RebootNeeded,omitempty"`
}

type GetDNS struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDNS" json:"-"`
}

type GetDNSResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDNSResponse" json:"-"`

	//
	// DNS information.
	//
	DNSInformation *tt.DNSInformation `xml:"DNSInformation,omitempty" json:"DNSInformation,omitempty"`
}

type SetDNS struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDNS" json:"-"`

	//
	// Indicate if the DNS address is to be retrieved using DHCP.
	//
	FromDHCP bool `xml:"FromDHCP,omitempty" json:"FromDHCP,omitempty"`

	//
	// DNS search domain.
	//
	SearchDomain []string `xml:"SearchDomain,omitempty" json:"SearchDomain,omitempty"`

	//
	// DNS address(es) set manually.
	//
	DNSManual []*tt.IPAddress `xml:"DNSManual,omitempty" json:"DNSManual,omitempty"`
}

type SetDNSResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDNSResponse" json:"-"`
}

type GetNTP struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetNTP" json:"-"`
}

type GetNTPResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetNTPResponse" json:"-"`

	//
	// NTP information.
	//
	NTPInformation *tt.NTPInformation `xml:"NTPInformation,omitempty" json:"NTPInformation,omitempty"`
}

type SetNTP struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetNTP" json:"-"`

	//
	// Indicate if NTP address information is to be retrieved using DHCP.
	//
	FromDHCP bool `xml:"FromDHCP,omitempty" json:"FromDHCP,omitempty"`

	//
	// Manual NTP settings.
	//
	NTPManual []*tt.NetworkHost `xml:"NTPManual,omitempty" json:"NTPManual,omitempty"`
}

type SetNTPResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetNTPResponse" json:"-"`
}

type GetDynamicDNS struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDynamicDNS" json:"-"`
}

type GetDynamicDNSResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDynamicDNSResponse" json:"-"`

	//
	// Dynamic DNS information.
	//
	DynamicDNSInformation *tt.DynamicDNSInformation `xml:"DynamicDNSInformation,omitempty" json:"DynamicDNSInformation,omitempty"`
}

type SetDynamicDNS struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDynamicDNS" json:"-"`

	//
	// Dynamic DNS type.
	//
	Type *tt.DynamicDNSType `xml:"Type,omitempty" json:"Type,omitempty"`

	//
	// DNS name.
	//
	Name *tt.DNSName `xml:"Name,omitempty" json:"Name,omitempty"`

	//
	// DNS record time to live.
	//
	TTL string `xml:"TTL,omitempty" json:"TTL,omitempty"`
}

type SetDynamicDNSResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDynamicDNSResponse" json:"-"`
}

type GetNetworkInterfaces struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetNetworkInterfaces" json:"-"`
}

type GetNetworkInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetNetworkInterfacesResponse" json:"-"`

	//
	// List of network interfaces.
	//
	NetworkInterfaces []*tt.NetworkInterface `xml:"NetworkInterfaces,omitempty" json:"NetworkInterfaces,omitempty"`
}

type SetNetworkInterfaces struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetNetworkInterfaces" json:"-"`

	//
	// Symbolic network interface name.
	//
	InterfaceToken *tt.ReferenceToken `xml:"InterfaceToken,omitempty" json:"InterfaceToken,omitempty"`

	//
	// Network interface name.
	//
	NetworkInterface *tt.NetworkInterfaceSetConfiguration `xml:"NetworkInterface,omitempty" json:"NetworkInterface,omitempty"`
}

type SetNetworkInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetNetworkInterfacesResponse" json:"-"`

	//
	// Indicates whether or not a reboot is required after configuration updates.
	// If a device responds with RebootNeeded set to false, the device can be reached
	// via the new IP address without further action. A client should be aware that a device
	// may not be responsive for a short period of time until it signals availability at
	// the new address via the discovery Hello messages.
	// If a device responds with RebootNeeded set to true, it will be further available under
	// its previous IP address. The settings will only be activated when the device is
	// rebooted via the SystemReboot command.
	//
	RebootNeeded bool `xml:"RebootNeeded,omitempty" json:"RebootNeeded,omitempty"`
}

type GetNetworkProtocols struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetNetworkProtocols" json:"-"`
}

type GetNetworkProtocolsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetNetworkProtocolsResponse" json:"-"`

	// Contains an array of defined protocols supported by the device. There are three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be retrieved for each protocol: port and enable/disable.
	NetworkProtocols []*tt.NetworkProtocol `xml:"NetworkProtocols,omitempty" json:"NetworkProtocols,omitempty"`
}

type SetNetworkProtocols struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetNetworkProtocols" json:"-"`

	// Configures one or more defined network protocols supported by the device. There are currently three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be set for each protocol: port and enable/disable.
	NetworkProtocols []*tt.NetworkProtocol `xml:"NetworkProtocols,omitempty" json:"NetworkProtocols,omitempty"`
}

type SetNetworkProtocolsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetNetworkProtocolsResponse" json:"-"`
}

type GetNetworkDefaultGateway struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetNetworkDefaultGateway" json:"-"`
}

type GetNetworkDefaultGatewayResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetNetworkDefaultGatewayResponse" json:"-"`

	// Gets the default IPv4 and IPv6 gateway settings from the device.
	NetworkGateway *tt.NetworkGateway `xml:"NetworkGateway,omitempty" json:"NetworkGateway,omitempty"`
}

type SetNetworkDefaultGateway struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetNetworkDefaultGateway" json:"-"`

	// Sets IPv4 gateway address used as default setting.
	IPv4Address []*tt.IPv4Address `xml:"IPv4Address,omitempty" json:"IPv4Address,omitempty"`

	// Sets IPv6 gateway address used as default setting.
	IPv6Address []*tt.IPv6Address `xml:"IPv6Address,omitempty" json:"IPv6Address,omitempty"`
}

type SetNetworkDefaultGatewayResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetNetworkDefaultGatewayResponse" json:"-"`
}

type GetZeroConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetZeroConfiguration" json:"-"`
}

type GetZeroConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetZeroConfigurationResponse" json:"-"`

	// Contains the zero-configuration.
	ZeroConfiguration *tt.NetworkZeroConfiguration `xml:"ZeroConfiguration,omitempty" json:"ZeroConfiguration,omitempty"`
}

type SetZeroConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetZeroConfiguration" json:"-"`

	// Unique identifier referencing the physical interface.
	InterfaceToken *tt.ReferenceToken `xml:"InterfaceToken,omitempty" json:"InterfaceToken,omitempty"`

	// Specifies if the zero-configuration should be enabled or not.
	Enabled bool `xml:"Enabled,omitempty" json:"Enabled,omitempty"`
}

type SetZeroConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetZeroConfigurationResponse" json:"-"`
}

type GetIPAddressFilter struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetIPAddressFilter" json:"-"`
}

type GetIPAddressFilterResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetIPAddressFilterResponse" json:"-"`

	IPAddressFilter *tt.IPAddressFilter `xml:"IPAddressFilter,omitempty" json:"IPAddressFilter,omitempty"`
}

type SetIPAddressFilter struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetIPAddressFilter" json:"-"`

	IPAddressFilter *tt.IPAddressFilter `xml:"IPAddressFilter,omitempty" json:"IPAddressFilter,omitempty"`
}

type SetIPAddressFilterResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetIPAddressFilterResponse" json:"-"`
}

type AddIPAddressFilter struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl AddIPAddressFilter" json:"-"`

	IPAddressFilter *tt.IPAddressFilter `xml:"IPAddressFilter,omitempty" json:"IPAddressFilter,omitempty"`
}

type AddIPAddressFilterResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl AddIPAddressFilterResponse" json:"-"`
}

type RemoveIPAddressFilter struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl RemoveIPAddressFilter" json:"-"`

	IPAddressFilter *tt.IPAddressFilter `xml:"IPAddressFilter,omitempty" json:"IPAddressFilter,omitempty"`
}

type RemoveIPAddressFilterResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl RemoveIPAddressFilterResponse" json:"-"`
}

type GetAccessPolicy struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetAccessPolicy" json:"-"`
}

type GetAccessPolicyResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetAccessPolicyResponse" json:"-"`

	PolicyFile *tt.BinaryData `xml:"PolicyFile,omitempty" json:"PolicyFile,omitempty"`
}

type SetAccessPolicy struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetAccessPolicy" json:"-"`

	PolicyFile *tt.BinaryData `xml:"PolicyFile,omitempty" json:"PolicyFile,omitempty"`
}

type SetAccessPolicyResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetAccessPolicyResponse" json:"-"`
}

type CreateCertificate struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl CreateCertificate" json:"-"`

	// Certificate id.
	CertificateID string `xml:"CertificateID,omitempty" json:"CertificateID,omitempty"`

	// Identification of the entity associated with the public-key.
	Subject string `xml:"Subject,omitempty" json:"Subject,omitempty"`

	// Certificate validity start date.
	ValidNotBefore soap.XSDDateTime `xml:"ValidNotBefore,omitempty" json:"ValidNotBefore,omitempty"`

	// Certificate expiry start date.
	ValidNotAfter soap.XSDDateTime `xml:"ValidNotAfter,omitempty" json:"ValidNotAfter,omitempty"`
}

type CreateCertificateResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl CreateCertificateResponse" json:"-"`

	//
	// base64 encoded DER representation of certificate.
	//
	NvtCertificate *tt.Certificate `xml:"NvtCertificate,omitempty" json:"NvtCertificate,omitempty"`
}

type GetCertificates struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCertificates" json:"-"`
}

type GetCertificatesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCertificatesResponse" json:"-"`

	//
	// Id and base64 encoded DER representation of all available certificates.
	//
	NvtCertificate []*tt.Certificate `xml:"NvtCertificate,omitempty" json:"NvtCertificate,omitempty"`
}

type GetCertificatesStatus struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCertificatesStatus" json:"-"`
}

type GetCertificatesStatusResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCertificatesStatusResponse" json:"-"`

	//
	// Indicates if a certificate is used in an optional HTTPS configuration of the device.
	//
	CertificateStatus []*tt.CertificateStatus `xml:"CertificateStatus,omitempty" json:"CertificateStatus,omitempty"`
}

type SetCertificatesStatus struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetCertificatesStatus" json:"-"`

	//
	// Indicates if a certificate is to be used in an optional HTTPS configuration of the device.
	//
	CertificateStatus []*tt.CertificateStatus `xml:"CertificateStatus,omitempty" json:"CertificateStatus,omitempty"`
}

type SetCertificatesStatusResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetCertificatesStatusResponse" json:"-"`
}

type DeleteCertificates struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteCertificates" json:"-"`

	//
	// List of ids of certificates to delete.
	//
	CertificateID []string `xml:"CertificateID,omitempty" json:"CertificateID,omitempty"`
}

type DeleteCertificatesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteCertificatesResponse" json:"-"`
}

type GetPkcs10Request struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetPkcs10Request" json:"-"`

	//
	// List of ids of certificates to delete.
	//
	CertificateID string `xml:"CertificateID,omitempty" json:"CertificateID,omitempty"`

	//
	// Relative Dinstinguished Name(RDN) CommonName(CN).
	//
	Subject string `xml:"Subject,omitempty" json:"Subject,omitempty"`

	//
	// Optional base64 encoded DER attributes.
	//
	Attributes *tt.BinaryData `xml:"Attributes,omitempty" json:"Attributes,omitempty"`
}

type GetPkcs10RequestResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetPkcs10RequestResponse" json:"-"`

	//
	// base64 encoded DER representation of certificate.
	//
	Pkcs10Request *tt.BinaryData `xml:"Pkcs10Request,omitempty" json:"Pkcs10Request,omitempty"`
}

type LoadCertificates struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl LoadCertificates" json:"-"`

	//
	// Optional id and base64 encoded DER representation of certificate.
	//
	NVTCertificate []*tt.Certificate `xml:"NVTCertificate,omitempty" json:"NVTCertificate,omitempty"`
}

type LoadCertificatesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl LoadCertificatesResponse" json:"-"`
}

type GetClientCertificateMode struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetClientCertificateMode" json:"-"`
}

type GetClientCertificateModeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetClientCertificateModeResponse" json:"-"`

	//
	// Indicates whether or not client certificates are required by device.
	//
	Enabled bool `xml:"Enabled,omitempty" json:"Enabled,omitempty"`
}

type SetClientCertificateMode struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetClientCertificateMode" json:"-"`

	//
	// Indicates whether or not client certificates are required by device.
	//
	Enabled bool `xml:"Enabled,omitempty" json:"Enabled,omitempty"`
}

type SetClientCertificateModeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetClientCertificateModeResponse" json:"-"`
}

type GetCACertificates struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCACertificates" json:"-"`
}

type GetCACertificatesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCACertificatesResponse" json:"-"`

	CACertificate []*tt.Certificate `xml:"CACertificate,omitempty" json:"CACertificate,omitempty"`
}

type LoadCertificateWithPrivateKey struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl LoadCertificateWithPrivateKey" json:"-"`

	CertificateWithPrivateKey []*tt.CertificateWithPrivateKey `xml:"CertificateWithPrivateKey,omitempty" json:"CertificateWithPrivateKey,omitempty"`
}

type LoadCertificateWithPrivateKeyResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl LoadCertificateWithPrivateKeyResponse" json:"-"`
}

type GetCertificateInformation struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCertificateInformation" json:"-"`

	CertificateID string `xml:"CertificateID,omitempty" json:"CertificateID,omitempty"`
}

type GetCertificateInformationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetCertificateInformationResponse" json:"-"`

	CertificateInformation *tt.CertificateInformation `xml:"CertificateInformation,omitempty" json:"CertificateInformation,omitempty"`
}

type LoadCACertificates struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl LoadCACertificates" json:"-"`

	CACertificate []*tt.Certificate `xml:"CACertificate,omitempty" json:"CACertificate,omitempty"`
}

type LoadCACertificatesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl LoadCACertificatesResponse" json:"-"`
}

type CreateDot1XConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl CreateDot1XConfiguration" json:"-"`

	Dot1XConfiguration *tt.Dot1XConfiguration `xml:"Dot1XConfiguration,omitempty" json:"Dot1XConfiguration,omitempty"`
}

type CreateDot1XConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl CreateDot1XConfigurationResponse" json:"-"`
}

type SetDot1XConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDot1XConfiguration" json:"-"`

	Dot1XConfiguration *tt.Dot1XConfiguration `xml:"Dot1XConfiguration,omitempty" json:"Dot1XConfiguration,omitempty"`
}

type SetDot1XConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetDot1XConfigurationResponse" json:"-"`
}

type GetDot1XConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDot1XConfiguration" json:"-"`

	Dot1XConfigurationToken *tt.ReferenceToken `xml:"Dot1XConfigurationToken,omitempty" json:"Dot1XConfigurationToken,omitempty"`
}

type GetDot1XConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDot1XConfigurationResponse" json:"-"`

	Dot1XConfiguration *tt.Dot1XConfiguration `xml:"Dot1XConfiguration,omitempty" json:"Dot1XConfiguration,omitempty"`
}

type GetDot1XConfigurations struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDot1XConfigurations" json:"-"`
}

type GetDot1XConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDot1XConfigurationsResponse" json:"-"`

	Dot1XConfiguration []*tt.Dot1XConfiguration `xml:"Dot1XConfiguration,omitempty" json:"Dot1XConfiguration,omitempty"`
}

type DeleteDot1XConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteDot1XConfiguration" json:"-"`

	Dot1XConfigurationToken []*tt.ReferenceToken `xml:"Dot1XConfigurationToken,omitempty" json:"Dot1XConfigurationToken,omitempty"`
}

type DeleteDot1XConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteDot1XConfigurationResponse" json:"-"`
}

type GetRelayOutputs struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetRelayOutputs" json:"-"`
}

type GetRelayOutputsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetRelayOutputsResponse" json:"-"`

	RelayOutputs []*tt.RelayOutput `xml:"RelayOutputs,omitempty" json:"RelayOutputs,omitempty"`
}

type SetRelayOutputSettings struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetRelayOutputSettings" json:"-"`

	RelayOutputToken *tt.ReferenceToken `xml:"RelayOutputToken,omitempty" json:"RelayOutputToken,omitempty"`

	Properties *tt.RelayOutputSettings `xml:"Properties,omitempty" json:"Properties,omitempty"`
}

type SetRelayOutputSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetRelayOutputSettingsResponse" json:"-"`
}

type SetRelayOutputState struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetRelayOutputState" json:"-"`

	RelayOutputToken *tt.ReferenceToken `xml:"RelayOutputToken,omitempty" json:"RelayOutputToken,omitempty"`

	LogicalState *tt.RelayLogicalState `xml:"LogicalState,omitempty" json:"LogicalState,omitempty"`
}

type SetRelayOutputStateResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetRelayOutputStateResponse" json:"-"`
}

type SendAuxiliaryCommand struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SendAuxiliaryCommand" json:"-"`

	AuxiliaryCommand *tt.AuxiliaryData `xml:"AuxiliaryCommand,omitempty" json:"AuxiliaryCommand,omitempty"`
}

type SendAuxiliaryCommandResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SendAuxiliaryCommandResponse" json:"-"`

	AuxiliaryCommandResponse *tt.AuxiliaryData `xml:"AuxiliaryCommandResponse,omitempty" json:"AuxiliaryCommandResponse,omitempty"`
}

type GetDot11Capabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDot11Capabilities" json:"-"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type GetDot11CapabilitiesResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDot11CapabilitiesResponse" json:"-"`

	Capabilities *tt.Dot11Capabilities `xml:"Capabilities,omitempty" json:"Capabilities,omitempty"`
}

type GetDot11Status struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDot11Status" json:"-"`

	InterfaceToken *tt.ReferenceToken `xml:"InterfaceToken,omitempty" json:"InterfaceToken,omitempty"`
}

type GetDot11StatusResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetDot11StatusResponse" json:"-"`

	Status *tt.Dot11Status `xml:"Status,omitempty" json:"Status,omitempty"`
}

type ScanAvailableDot11Networks struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl ScanAvailableDot11Networks" json:"-"`

	InterfaceToken *tt.ReferenceToken `xml:"InterfaceToken,omitempty" json:"InterfaceToken,omitempty"`
}

type ScanAvailableDot11NetworksResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl ScanAvailableDot11NetworksResponse" json:"-"`

	Networks []*tt.Dot11AvailableNetworks `xml:"Networks,omitempty" json:"Networks,omitempty"`
}

type GetSystemUris struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemUris" json:"-"`
}

type GetSystemUrisResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetSystemUrisResponse" json:"-"`

	SystemLogUris *tt.SystemLogUriList `xml:"SystemLogUris,omitempty" json:"SystemLogUris,omitempty"`

	SupportInfoUri string `xml:"SupportInfoUri,omitempty" json:"SupportInfoUri,omitempty"`

	SystemBackupUri string `xml:"SystemBackupUri,omitempty" json:"SystemBackupUri,omitempty"`

	Extension struct {
	} `xml:"Extension,omitempty" json:"Extension,omitempty"`
}

type StartFirmwareUpgrade struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl StartFirmwareUpgrade" json:"-"`
}

type StartFirmwareUpgradeResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl StartFirmwareUpgradeResponse" json:"-"`

	UploadUri string `xml:"UploadUri,omitempty" json:"UploadUri,omitempty"`

	UploadDelay string `xml:"UploadDelay,omitempty" json:"UploadDelay,omitempty"`

	ExpectedDownTime string `xml:"ExpectedDownTime,omitempty" json:"ExpectedDownTime,omitempty"`
}

type StartSystemRestore struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl StartSystemRestore" json:"-"`
}

type StartSystemRestoreResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl StartSystemRestoreResponse" json:"-"`

	UploadUri string `xml:"UploadUri,omitempty" json:"UploadUri,omitempty"`

	ExpectedDownTime string `xml:"ExpectedDownTime,omitempty" json:"ExpectedDownTime,omitempty"`
}

type GetStorageConfigurations struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetStorageConfigurations" json:"-"`
}

type GetStorageConfigurationsResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetStorageConfigurationsResponse" json:"-"`

	StorageConfigurations []*StorageConfiguration `xml:"StorageConfigurations,omitempty" json:"StorageConfigurations,omitempty"`
}

type CreateStorageConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl CreateStorageConfiguration" json:"-"`

	StorageConfiguration *StorageConfigurationData `xml:"StorageConfiguration,omitempty" json:"StorageConfiguration,omitempty"`
}

type CreateStorageConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl CreateStorageConfigurationResponse" json:"-"`

	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`
}

type GetStorageConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetStorageConfiguration" json:"-"`

	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`
}

type GetStorageConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetStorageConfigurationResponse" json:"-"`

	StorageConfiguration *StorageConfiguration `xml:"StorageConfiguration,omitempty" json:"StorageConfiguration,omitempty"`
}

type SetStorageConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetStorageConfiguration" json:"-"`

	StorageConfiguration *StorageConfiguration `xml:"StorageConfiguration,omitempty" json:"StorageConfiguration,omitempty"`
}

type SetStorageConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetStorageConfigurationResponse" json:"-"`
}

type DeleteStorageConfiguration struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteStorageConfiguration" json:"-"`

	Token *tt.ReferenceToken `xml:"Token,omitempty" json:"Token,omitempty"`
}

type DeleteStorageConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteStorageConfigurationResponse" json:"-"`
}

type GetGeoLocation struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetGeoLocation" json:"-"`
}

type GetGeoLocationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl GetGeoLocationResponse" json:"-"`

	Location []*tt.LocationEntity `xml:"Location,omitempty" json:"Location,omitempty"`
}

type SetGeoLocation struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetGeoLocation" json:"-"`

	Location []*tt.LocationEntity `xml:"Location,omitempty" json:"Location,omitempty"`
}

type SetGeoLocationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl SetGeoLocationResponse" json:"-"`
}

type DeleteGeoLocation struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteGeoLocation" json:"-"`

	Location []*tt.LocationEntity `xml:"Location,omitempty" json:"Location,omitempty"`
}

type DeleteGeoLocationResponse struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl DeleteGeoLocationResponse" json:"-"`
}

type Service struct {

	// Namespace of the service being described. This parameter allows to match the service capabilities to the service. Note that only one set of capabilities is supported per namespace.
	Namespace string `xml:"Namespace,omitempty" json:"Namespace,omitempty"`

	// The transport addresses where the service can be reached. The scheme and IP part shall match the one used in the request (i.e. the GetServices request).
	XAddr string `xml:"XAddr,omitempty" json:"XAddr,omitempty"`

	Capabilities struct {
	} `xml:"Capabilities,omitempty" json:"Capabilities,omitempty"`

	// The version of the service (not the ONVIF core spec version).
	Version *tt.OnvifVersion `xml:"Version,omitempty" json:"Version,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type DeviceServiceCapabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl Capabilities" json:"-"`

	// Network capabilities.
	Network *NetworkCapabilities `xml:"Network,omitempty" json:"Network,omitempty"`

	// Security capabilities.
	Security *SecurityCapabilities `xml:"Security,omitempty" json:"Security,omitempty"`

	// System capabilities.
	System *SystemCapabilities `xml:"System,omitempty" json:"System,omitempty"`

	// Capabilities that do not fit in any of the other categories.
	Misc *MiscCapabilities `xml:"Misc,omitempty" json:"Misc,omitempty"`
}

type NetworkCapabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl Network" json:"-"`

	// Indicates support for IP filtering.

	IPFilter bool `xml:"IPFilter,attr,omitempty" json:"IPFilter,omitempty"`

	// Indicates support for zeroconf.

	ZeroConfiguration bool `xml:"ZeroConfiguration,attr,omitempty" json:"ZeroConfiguration,omitempty"`

	// Indicates support for IPv6.

	IPVersion6 bool `xml:"IPVersion6,attr,omitempty" json:"IPVersion6,omitempty"`

	// Indicates support for dynamic DNS configuration.

	DynDNS bool `xml:"DynDNS,attr,omitempty" json:"DynDNS,omitempty"`

	// Indicates support for IEEE 802.11 configuration.

	Dot11Configuration bool `xml:"Dot11Configuration,attr,omitempty" json:"Dot11Configuration,omitempty"`

	// Indicates the maximum number of Dot1X configurations supported by the device

	Dot1XConfigurations int32 `xml:"Dot1XConfigurations,attr,omitempty" json:"Dot1XConfigurations,omitempty"`

	// Indicates support for retrieval of hostname from DHCP.

	HostnameFromDHCP bool `xml:"HostnameFromDHCP,attr,omitempty" json:"HostnameFromDHCP,omitempty"`

	// Maximum number of NTP servers supported by the devices SetNTP command.

	NTP int32 `xml:"NTP,attr,omitempty" json:"NTP,omitempty"`

	// Indicates support for Stateful IPv6 DHCP.

	DHCPv6 bool `xml:"DHCPv6,attr,omitempty" json:"DHCPv6,omitempty"`
}

type SecurityCapabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl Security" json:"-"`

	// Indicates support for TLS 1.0.

	TLS1_0 bool `xml:"TLS1.0,attr,omitempty" json:"TLS1.0,omitempty"`

	// Indicates support for TLS 1.1.

	TLS1_1 bool `xml:"TLS1.1,attr,omitempty" json:"TLS1.1,omitempty"`

	// Indicates support for TLS 1.2.

	TLS1_2 bool `xml:"TLS1.2,attr,omitempty" json:"TLS1.2,omitempty"`

	// Indicates support for onboard key generation.

	OnboardKeyGeneration bool `xml:"OnboardKeyGeneration,attr,omitempty" json:"OnboardKeyGeneration,omitempty"`

	// Indicates support for access policy configuration.

	AccessPolicyConfig bool `xml:"AccessPolicyConfig,attr,omitempty" json:"AccessPolicyConfig,omitempty"`

	// Indicates support for the ONVIF default access policy.

	DefaultAccessPolicy bool `xml:"DefaultAccessPolicy,attr,omitempty" json:"DefaultAccessPolicy,omitempty"`

	// Indicates support for IEEE 802.1X configuration.

	Dot1X bool `xml:"Dot1X,attr,omitempty" json:"Dot1X,omitempty"`

	// Indicates support for remote user configuration. Used when accessing another device.

	RemoteUserHandling bool `xml:"RemoteUserHandling,attr,omitempty" json:"RemoteUserHandling,omitempty"`

	// Indicates support for WS-Security X.509 token.

	X_509Token bool `xml:"X.509Token,attr,omitempty" json:"X.509Token,omitempty"`

	// Indicates support for WS-Security SAML token.

	SAMLToken bool `xml:"SAMLToken,attr,omitempty" json:"SAMLToken,omitempty"`

	// Indicates support for WS-Security Kerberos token.

	KerberosToken bool `xml:"KerberosToken,attr,omitempty" json:"KerberosToken,omitempty"`

	// Indicates support for WS-Security Username token.

	UsernameToken bool `xml:"UsernameToken,attr,omitempty" json:"UsernameToken,omitempty"`

	// Indicates support for WS over HTTP digest authenticated communication layer.

	HttpDigest bool `xml:"HttpDigest,attr,omitempty" json:"HttpDigest,omitempty"`

	// Indicates support for WS-Security REL token.

	RELToken bool `xml:"RELToken,attr,omitempty" json:"RELToken,omitempty"`

	// EAP Methods supported by the device. The int values refer to the .

	SupportedEAPMethods *tt.IntList `xml:"SupportedEAPMethods,attr,omitempty" json:"SupportedEAPMethods,omitempty"`

	// The maximum number of users that the device supports.

	MaxUsers int32 `xml:"MaxUsers,attr,omitempty" json:"MaxUsers,omitempty"`

	// Maximum number of characters supported for the username by CreateUsers.

	MaxUserNameLength int32 `xml:"MaxUserNameLength,attr,omitempty" json:"MaxUserNameLength,omitempty"`

	// Maximum number of characters supported for the password by CreateUsers and SetUser.

	MaxPasswordLength int32 `xml:"MaxPasswordLength,attr,omitempty" json:"MaxPasswordLength,omitempty"`

	// Indicates which security policies are supported. Options are: ModifyPassword, PasswordComplexity, AuthFailureWarnings

	SecurityPolicies *tt.StringList `xml:"SecurityPolicies,attr,omitempty" json:"SecurityPolicies,omitempty"`

	// Maximum number of passwords that the device can remember for each user

	MaxPasswordHistory int32 `xml:"MaxPasswordHistory,attr,omitempty" json:"MaxPasswordHistory,omitempty"`
}

type SystemCapabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl System" json:"-"`

	// Indicates support for WS Discovery resolve requests.

	DiscoveryResolve bool `xml:"DiscoveryResolve,attr,omitempty" json:"DiscoveryResolve,omitempty"`

	// Indicates support for WS-Discovery Bye.

	DiscoveryBye bool `xml:"DiscoveryBye,attr,omitempty" json:"DiscoveryBye,omitempty"`

	// Indicates support for remote discovery.

	RemoteDiscovery bool `xml:"RemoteDiscovery,attr,omitempty" json:"RemoteDiscovery,omitempty"`

	// Indicates support for system backup through MTOM.

	SystemBackup bool `xml:"SystemBackup,attr,omitempty" json:"SystemBackup,omitempty"`

	// Indicates support for retrieval of system logging through MTOM.

	SystemLogging bool `xml:"SystemLogging,attr,omitempty" json:"SystemLogging,omitempty"`

	// Indicates support for firmware upgrade through MTOM.

	FirmwareUpgrade bool `xml:"FirmwareUpgrade,attr,omitempty" json:"FirmwareUpgrade,omitempty"`

	// Indicates support for firmware upgrade through HTTP.

	HttpFirmwareUpgrade bool `xml:"HttpFirmwareUpgrade,attr,omitempty" json:"HttpFirmwareUpgrade,omitempty"`

	// Indicates support for system backup through HTTP.

	HttpSystemBackup bool `xml:"HttpSystemBackup,attr,omitempty" json:"HttpSystemBackup,omitempty"`

	// Indicates support for retrieval of system logging through HTTP.

	HttpSystemLogging bool `xml:"HttpSystemLogging,attr,omitempty" json:"HttpSystemLogging,omitempty"`

	// Indicates support for retrieving support information through HTTP.

	HttpSupportInformation bool `xml:"HttpSupportInformation,attr,omitempty" json:"HttpSupportInformation,omitempty"`

	// Indicates support for storage configuration interfaces.

	StorageConfiguration bool `xml:"StorageConfiguration,attr,omitempty" json:"StorageConfiguration,omitempty"`

	// Indicates maximum number of storage configurations supported.

	MaxStorageConfigurations int32 `xml:"MaxStorageConfigurations,attr,omitempty" json:"MaxStorageConfigurations,omitempty"`

	// If present signals support for geo location. The value signals the supported number of entries.

	GeoLocationEntries int32 `xml:"GeoLocationEntries,attr,omitempty" json:"GeoLocationEntries,omitempty"`

	// List of supported automatic GeoLocation adjustment supported by the device. Valid items are defined by tds:AutoGeoMode.

	AutoGeo *tt.StringAttrList `xml:"AutoGeo,attr,omitempty" json:"AutoGeo,omitempty"`

	// Enumerates the supported StorageTypes, see tds:StorageType.

	StorageTypesSupported *tt.StringAttrList `xml:"StorageTypesSupported,attr,omitempty" json:"StorageTypesSupported,omitempty"`

	// Indicates no support for network discovery.

	DiscoveryNotSupported bool `xml:"DiscoveryNotSupported,attr,omitempty" json:"DiscoveryNotSupported,omitempty"`

	// Indicates no support for network configuration.

	NetworkConfigNotSupported bool `xml:"NetworkConfigNotSupported,attr,omitempty" json:"NetworkConfigNotSupported,omitempty"`

	// Indicates no support for user configuration.

	UserConfigNotSupported bool `xml:"UserConfigNotSupported,attr,omitempty" json:"UserConfigNotSupported,omitempty"`

	// List of supported Addons by the device.

	Addons *tt.StringAttrList `xml:"Addons,attr,omitempty" json:"Addons,omitempty"`
}

type MiscCapabilities struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl Misc" json:"-"`

	// Lists of commands supported by SendAuxiliaryCommand.

	AuxiliaryCommands *tt.StringAttrList `xml:"AuxiliaryCommands,attr,omitempty" json:"AuxiliaryCommands,omitempty"`
}

type UserCredential struct {
	XMLName xml.Name `xml:"http://www.onvif.org/ver10/device/wsdl User" json:"-"`

	// User name
	UserName string `xml:"UserName,omitempty" json:"UserName,omitempty"`

	// optional password
	Password string `xml:"Password,omitempty" json:"Password,omitempty"`

	Extension struct {
	} `xml:"Extension,omitempty" json:"Extension,omitempty"`
}

type StorageConfigurationData struct {

	// local path
	LocalPath string `xml:"LocalPath,omitempty" json:"LocalPath,omitempty"`

	// Storage server address
	StorageUri string `xml:"StorageUri,omitempty" json:"StorageUri,omitempty"`

	// User credential for the storage server
	User *UserCredential `xml:"User,omitempty" json:"User,omitempty"`

	Extension struct {
	} `xml:"Extension,omitempty" json:"Extension,omitempty"`

	// StorageType lists the acceptable values for type attribute

	Type string `xml:"type,attr,omitempty" json:"type,omitempty"`
}

type StorageConfiguration struct {
	*tt.DeviceEntity

	Data *StorageConfigurationData `xml:"Data,omitempty" json:"Data,omitempty"`
}

type Device interface {

	/* Returns information about services on the device. */
	GetServices(request *GetServices) (*GetServicesResponse, error)

	GetServicesContext(ctx context.Context, request *GetServices) (*GetServicesResponse, error)

	/* Returns the capabilities of the device service. The result is returned in a typed answer. */
	GetServiceCapabilities(request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error)

	GetServiceCapabilitiesContext(ctx context.Context, request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error)

	/* This operation gets basic device information from the device. */
	GetDeviceInformation(request *GetDeviceInformation) (*GetDeviceInformationResponse, error)

	GetDeviceInformationContext(ctx context.Context, request *GetDeviceInformation) (*GetDeviceInformationResponse, error)

	/* This operation sets the device system date and time. The device shall support the
	configuration of the daylight saving setting and of the manual system date and time (if
	applicable) or indication of NTP time (if applicable) through the SetSystemDateAndTime
	command.
	If system time and date are set manually, the client shall include UTCDateTime in the request.
	A TimeZone token which is not formed according to the rules of IEEE 1003.1 section 8.3 is considered as invalid timezone.
	The DayLightSavings flag should be set to true to activate any DST settings of the TimeZone string.
	Clear the DayLightSavings flag if the DST portion of the TimeZone settings should be ignored.
	*/
	SetSystemDateAndTime(request *SetSystemDateAndTime) (*SetSystemDateAndTimeResponse, error)

	SetSystemDateAndTimeContext(ctx context.Context, request *SetSystemDateAndTime) (*SetSystemDateAndTimeResponse, error)

	/* This operation gets the device system date and time. The device shall support the return of
	the daylight saving setting and of the manual system date and time (if applicable) or indication
	of NTP time (if applicable) through the GetSystemDateAndTime command.
	A device shall provide the UTCDateTime information. */
	GetSystemDateAndTime(request *GetSystemDateAndTime) (*GetSystemDateAndTimeResponse, error)

	GetSystemDateAndTimeContext(ctx context.Context, request *GetSystemDateAndTime) (*GetSystemDateAndTimeResponse, error)

	/* This operation reloads the parameters on the device to their factory default values. */
	SetSystemFactoryDefault(request *SetSystemFactoryDefault) (*SetSystemFactoryDefaultResponse, error)

	SetSystemFactoryDefaultContext(ctx context.Context, request *SetSystemFactoryDefault) (*SetSystemFactoryDefaultResponse, error)

	/* This operation upgrades a device firmware version. After a successful upgrade the response
	message is sent before the device reboots. The device should support firmware upgrade
	through the UpgradeSystemFirmware command. The exact format of the firmware data is
	outside the scope of this standard. */
	UpgradeSystemFirmware(request *UpgradeSystemFirmware) (*UpgradeSystemFirmwareResponse, error)

	UpgradeSystemFirmwareContext(ctx context.Context, request *UpgradeSystemFirmware) (*UpgradeSystemFirmwareResponse, error)

	/* This operation reboots the device. */
	SystemReboot(request *SystemReboot) (*SystemRebootResponse, error)

	SystemRebootContext(ctx context.Context, request *SystemReboot) (*SystemRebootResponse, error)

	/* This operation restores the system backup configuration files(s) previously retrieved from a
	device. The device should support restore of backup configuration file(s) through the
	RestoreSystem command. The exact format of the backup configuration file(s) is outside the
	scope of this standard. If the command is supported, it shall accept backup files returned by
	the GetSystemBackup command. */
	RestoreSystem(request *RestoreSystem) (*RestoreSystemResponse, error)

	RestoreSystemContext(ctx context.Context, request *RestoreSystem) (*RestoreSystemResponse, error)

	/* This operation is retrieves system backup configuration file(s) from a device. The device
	should support return of back up configuration file(s) through the GetSystemBackup command.
	The backup is returned with reference to a name and mime-type together with binary data.
	The exact format of the backup configuration files is outside the scope of this standard. */
	GetSystemBackup(request *GetSystemBackup) (*GetSystemBackupResponse, error)

	GetSystemBackupContext(ctx context.Context, request *GetSystemBackup) (*GetSystemBackupResponse, error)

	/* This operation gets a system log from the device. The exact format of the system logs is outside the scope of this standard. */
	GetSystemLog(request *GetSystemLog) (*GetSystemLogResponse, error)

	GetSystemLogContext(ctx context.Context, request *GetSystemLog) (*GetSystemLogResponse, error)

	/* This operation gets arbitary device diagnostics information from the device. */
	GetSystemSupportInformation(request *GetSystemSupportInformation) (*GetSystemSupportInformationResponse, error)

	GetSystemSupportInformationContext(ctx context.Context, request *GetSystemSupportInformation) (*GetSystemSupportInformationResponse, error)

	/* This operation requests the scope parameters of a device. The scope parameters are used in
	the device discovery to match a probe message, see Section 7. The Scope parameters are of
	two different types:
	Fixed scope parameters are permanent device characteristics and cannot be removed through the device management interface.
	The scope type is indicated in the scope list returned in the get scope parameters response. A device shall support
	retrieval of discovery scope parameters through the GetScopes command. As some scope parameters are mandatory,
	the device shall return a non-empty scope list in the response. */
	GetScopes(request *GetScopes) (*GetScopesResponse, error)

	GetScopesContext(ctx context.Context, request *GetScopes) (*GetScopesResponse, error)

	/* This operation sets the scope parameters of a device. The scope parameters are used in the
	device discovery to match a probe message.
	This operation replaces all existing configurable scope parameters (not fixed parameters). If
	this shall be avoided, one should use the scope add command instead. The device shall
	support configuration of discovery scope parameters through the SetScopes command. */
	SetScopes(request *SetScopes) (*SetScopesResponse, error)

	SetScopesContext(ctx context.Context, request *SetScopes) (*SetScopesResponse, error)

	/* This operation adds new configurable scope parameters to a device. The scope parameters
	are used in the device discovery to match a probe message. The device shall
	support addition of discovery scope parameters through the AddScopes command. */
	AddScopes(request *AddScopes) (*AddScopesResponse, error)

	AddScopesContext(ctx context.Context, request *AddScopes) (*AddScopesResponse, error)

	/* This operation deletes scope-configurable scope parameters from a device. The scope
	parameters are used in the device discovery to match a probe message, see Section 7. The
	device shall support deletion of discovery scope parameters through the RemoveScopes
	command.
	Table */
	RemoveScopes(request *RemoveScopes) (*RemoveScopesResponse, error)

	RemoveScopesContext(ctx context.Context, request *RemoveScopes) (*RemoveScopesResponse, error)

	/* This operation gets the discovery mode of a device. See Section 7.2 for the definition of the
	different device discovery modes. The device shall support retrieval of the discovery mode
	setting through the GetDiscoveryMode command. */
	GetDiscoveryMode(request *GetDiscoveryMode) (*GetDiscoveryModeResponse, error)

	GetDiscoveryModeContext(ctx context.Context, request *GetDiscoveryMode) (*GetDiscoveryModeResponse, error)

	/* This operation sets the discovery mode operation of a device. See Section 7.2 for the
	definition of the different device discovery modes. The device shall support configuration of
	the discovery mode setting through the SetDiscoveryMode command. */
	SetDiscoveryMode(request *SetDiscoveryMode) (*SetDiscoveryModeResponse, error)

	SetDiscoveryModeContext(ctx context.Context, request *SetDiscoveryMode) (*SetDiscoveryModeResponse, error)

	/* This operation gets the remote discovery mode of a device. See Section 7.4 for the definition
	of remote discovery extensions. A device that supports remote discovery shall support
	retrieval of the remote discovery mode setting through the GetRemoteDiscoveryMode
	command. */
	GetRemoteDiscoveryMode(request *GetRemoteDiscoveryMode) (*GetRemoteDiscoveryModeResponse, error)

	GetRemoteDiscoveryModeContext(ctx context.Context, request *GetRemoteDiscoveryMode) (*GetRemoteDiscoveryModeResponse, error)

	/* This operation sets the remote discovery mode of operation of a device. See Section 7.4 for
	the definition of remote discovery remote extensions. A device that supports remote discovery
	shall support configuration of the discovery mode setting through the
	SetRemoteDiscoveryMode command. */
	SetRemoteDiscoveryMode(request *SetRemoteDiscoveryMode) (*SetRemoteDiscoveryModeResponse, error)

	SetRemoteDiscoveryModeContext(ctx context.Context, request *SetRemoteDiscoveryMode) (*SetRemoteDiscoveryModeResponse, error)

	/* This operation gets the remote DP address or addresses from a device. If the device supports
	remote discovery, as specified in Section 7.4, the device shall support retrieval of the remote
	DP address(es) through the GetDPAddresses command. */
	GetDPAddresses(request *GetDPAddresses) (*GetDPAddressesResponse, error)

	GetDPAddressesContext(ctx context.Context, request *GetDPAddresses) (*GetDPAddressesResponse, error)

	/* This operation sets the remote DP address or addresses on a device. If the device supports
	remote discovery, as specified in Section 7.4, the device shall support configuration of the
	remote DP address(es) through the SetDPAddresses command. */
	SetDPAddresses(request *SetDPAddresses) (*SetDPAddressesResponse, error)

	SetDPAddressesContext(ctx context.Context, request *SetDPAddresses) (*SetDPAddressesResponse, error)

	/* A client can ask for the device service endpoint reference address property that can be used
	to derive the password equivalent for remote user operation. The device shall support the
	GetEndpointReference command returning the address property of the device service
	endpoint reference. */
	GetEndpointReference(request *GetEndpointReference) (*GetEndpointReferenceResponse, error)

	GetEndpointReferenceContext(ctx context.Context, request *GetEndpointReference) (*GetEndpointReferenceResponse, error)

	/* This operation returns the configured remote user (if any). A device supporting remote user
	handling shall support this operation. The user is only valid for the WS-UserToken profile or
	as a HTTP / RTSP user.
	The algorithm to use for deriving the password is described in section 5.12.2.1 of the core specification. */
	GetRemoteUser(request *GetRemoteUser) (*GetRemoteUserResponse, error)

	GetRemoteUserContext(ctx context.Context, request *GetRemoteUser) (*GetRemoteUserResponse, error)

	/* This operation sets the remote user. A device supporting remote user handling shall support this
	operation. The user is only valid for the WS-UserToken profile or as a HTTP / RTSP user.
	The password that is set shall always be the original (not derived) password.
	If UseDerivedPassword is set password derivation shall be done by the device when connecting to a
	remote device.The algorithm to use for deriving the password is described in section 5.12.2.1 of the core specification.
	To remove the remote user SetRemoteUser should be called without the RemoteUser parameter. */
	SetRemoteUser(request *SetRemoteUser) (*SetRemoteUserResponse, error)

	SetRemoteUserContext(ctx context.Context, request *SetRemoteUser) (*SetRemoteUserResponse, error)

	/* This operation lists the registered users and corresponding credentials on a device. The
	device shall support retrieval of registered device users and their credentials for the user
	token through the GetUsers command. */
	GetUsers(request *GetUsers) (*GetUsersResponse, error)

	GetUsersContext(ctx context.Context, request *GetUsers) (*GetUsersResponse, error)

	/* This operation creates new device users and corresponding credentials on a device for authentication purposes.
	The device shall support creation of device users and their credentials through the CreateUsers
	command. Either all users are created successfully or a fault message shall be returned
	without creating any user.
	ONVIF compliant devices are recommended to support password length of at least 28 bytes,
	as clients may follow the password derivation mechanism which results in 'password
	equivalent' of length 28 bytes, as described in section 3.1.2 of the ONVIF security white paper. */
	CreateUsers(request *CreateUsers) (*CreateUsersResponse, error)

	CreateUsersContext(ctx context.Context, request *CreateUsers) (*CreateUsersResponse, error)

	/* This operation deletes users on a device. The device shall support deletion of device users and their credentials
	through the DeleteUsers command. A device may have one or more fixed users
	that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a
	fault message shall be returned and no users be deleted. */
	DeleteUsers(request *DeleteUsers) (*DeleteUsersResponse, error)

	DeleteUsersContext(ctx context.Context, request *DeleteUsers) (*DeleteUsersResponse, error)

	/* This operation updates the settings for one or several users on a device for authentication purposes.
	The device shall support update of device users and their credentials through the SetUser command.
	Either all change requests are processed successfully or a fault message shall be returned and no change requests be processed. */
	SetUser(request *SetUser) (*SetUserResponse, error)

	SetUserContext(ctx context.Context, request *SetUser) (*SetUserResponse, error)

	/* This method allows to provide a URL where product specific WSDL and schema definitions can be retrieved. This method is deprecated. */
	GetWsdlUrl(request *GetWsdlUrl) (*GetWsdlUrlResponse, error)

	GetWsdlUrlContext(ctx context.Context, request *GetWsdlUrl) (*GetWsdlUrlResponse, error)

	/* This method allows retrieval of all the available parameters and their valid ranges for the password complexity configuration. */
	GetPasswordComplexityOptions(request *GetPasswordComplexityOptions) (*GetPasswordComplexityOptionsResponse, error)

	GetPasswordComplexityOptionsContext(ctx context.Context, request *GetPasswordComplexityOptions) (*GetPasswordComplexityOptionsResponse, error)

	/* This method allows retrieval of the current password complexity configuration settings. */
	GetPasswordComplexityConfiguration(request *GetPasswordComplexityConfiguration) (*GetPasswordComplexityConfigurationResponse, error)

	GetPasswordComplexityConfigurationContext(ctx context.Context, request *GetPasswordComplexityConfiguration) (*GetPasswordComplexityConfigurationResponse, error)

	/* This method allows setting of the password complexity configuration. */
	SetPasswordComplexityConfiguration(request *SetPasswordComplexityConfiguration) (*SetPasswordComplexityConfigurationResponse, error)

	SetPasswordComplexityConfigurationContext(ctx context.Context, request *SetPasswordComplexityConfiguration) (*SetPasswordComplexityConfigurationResponse, error)

	/* This method allows retrieval of the current password history configuration settings. */
	GetPasswordHistoryConfiguration(request *GetPasswordHistoryConfiguration) (*GetPasswordHistoryConfigurationResponse, error)

	GetPasswordHistoryConfigurationContext(ctx context.Context, request *GetPasswordHistoryConfiguration) (*GetPasswordHistoryConfigurationResponse, error)

	/* This method allows setting of the password history configuration. */
	SetPasswordHistoryConfiguration(request *SetPasswordHistoryConfiguration) (*SetPasswordHistoryConfigurationResponse, error)

	SetPasswordHistoryConfigurationContext(ctx context.Context, request *SetPasswordHistoryConfiguration) (*SetPasswordHistoryConfigurationResponse, error)

	/* This method allows retrieval of all the available parameters and their valid ranges for the authentication failure warning configuration. */
	GetAuthFailureWarningOptions(request *GetAuthFailureWarningOptions) (*GetAuthFailureWarningOptionsResponse, error)

	GetAuthFailureWarningOptionsContext(ctx context.Context, request *GetAuthFailureWarningOptions) (*GetAuthFailureWarningOptionsResponse, error)

	/* This method allows retrieval of the current authentication failure warning configuration settings. */
	GetAuthFailureWarningConfiguration(request *GetAuthFailureWarningConfiguration) (*GetAuthFailureWarningConfigurationResponse, error)

	GetAuthFailureWarningConfigurationContext(ctx context.Context, request *GetAuthFailureWarningConfiguration) (*GetAuthFailureWarningConfigurationResponse, error)

	/* This method allows setting of the authentication failure warning configuration. */
	SetAuthFailureWarningConfiguration(request *SetAuthFailureWarningConfiguration) (*SetAuthFailureWarningConfigurationResponse, error)

	SetAuthFailureWarningConfigurationContext(ctx context.Context, request *SetAuthFailureWarningConfiguration) (*SetAuthFailureWarningConfigurationResponse, error)

	/* This method has been replaced by the more generic GetServices method.
	For capabilities of individual services refer to the GetServiceCapabilities methods. */
	GetCapabilities(request *GetCapabilities) (*GetCapabilitiesResponse, error)

	GetCapabilitiesContext(ctx context.Context, request *GetCapabilities) (*GetCapabilitiesResponse, error)

	/* This operation is used by an endpoint to get the hostname from a device. The device shall
	return its hostname configurations through the GetHostname command. */
	GetHostname(request *GetHostname) (*GetHostnameResponse, error)

	GetHostnameContext(ctx context.Context, request *GetHostname) (*GetHostnameResponse, error)

	/* This operation sets the hostname on a device. It shall be possible to set the device hostname
	configurations through the SetHostname command.
	A device shall accept string formated according to RFC 1123 section 2.1 or alternatively to RFC 952,
	other string shall be considered as invalid strings.
	*/
	SetHostname(request *SetHostname) (*SetHostnameResponse, error)

	SetHostnameContext(ctx context.Context, request *SetHostname) (*SetHostnameResponse, error)

	/* This operation controls whether the hostname is set manually or retrieved via DHCP. */
	SetHostnameFromDHCP(request *SetHostnameFromDHCP) (*SetHostnameFromDHCPResponse, error)

	SetHostnameFromDHCPContext(ctx context.Context, request *SetHostnameFromDHCP) (*SetHostnameFromDHCPResponse, error)

	/* This operation gets the DNS settings from a device. The device shall return its DNS
	configurations through the GetDNS command. */
	GetDNS(request *GetDNS) (*GetDNSResponse, error)

	GetDNSContext(ctx context.Context, request *GetDNS) (*GetDNSResponse, error)

	/* This operation sets the DNS settings on a device. It shall be possible to set the device DNS
	configurations through the SetDNS command. */
	SetDNS(request *SetDNS) (*SetDNSResponse, error)

	SetDNSContext(ctx context.Context, request *SetDNS) (*SetDNSResponse, error)

	/* This operation gets the NTP settings from a device. If the device supports NTP, it shall be
	possible to get the NTP server settings through the GetNTP command. */
	GetNTP(request *GetNTP) (*GetNTPResponse, error)

	GetNTPContext(ctx context.Context, request *GetNTP) (*GetNTPResponse, error)

	/* This operation sets the NTP settings on a device. If the device supports NTP, it shall be
	possible to set the NTP server settings through the SetNTP command.
	A device shall accept string formated according to RFC 1123 section 2.1 or alternatively to RFC 952,
	other string shall be considered as invalid strings.
	Changes to the NTP server list will not affect the clock mode DateTimeType. Use SetSystemDateAndTime to activate NTP operation.
	*/
	SetNTP(request *SetNTP) (*SetNTPResponse, error)

	SetNTPContext(ctx context.Context, request *SetNTP) (*SetNTPResponse, error)

	/* This operation gets the dynamic DNS settings from a device. If the device supports dynamic
	DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to get the type, name
	and TTL through the GetDynamicDNS command. */
	GetDynamicDNS(request *GetDynamicDNS) (*GetDynamicDNSResponse, error)

	GetDynamicDNSContext(ctx context.Context, request *GetDynamicDNS) (*GetDynamicDNSResponse, error)

	/* This operation sets the dynamic DNS settings on a device. If the device supports dynamic
	DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to set the type, name
	and TTL through the SetDynamicDNS command. */
	SetDynamicDNS(request *SetDynamicDNS) (*SetDynamicDNSResponse, error)

	SetDynamicDNSContext(ctx context.Context, request *SetDynamicDNS) (*SetDynamicDNSResponse, error)

	/* This operation gets the network interface configuration from a device. The device shall
	support return of network interface configuration settings as defined by the NetworkInterface
	type through the GetNetworkInterfaces command. */
	GetNetworkInterfaces(request *GetNetworkInterfaces) (*GetNetworkInterfacesResponse, error)

	GetNetworkInterfacesContext(ctx context.Context, request *GetNetworkInterfaces) (*GetNetworkInterfacesResponse, error)

	/* This operation sets the network interface configuration on a device. The device shall support
	network configuration of supported network interfaces through the SetNetworkInterfaces
	command.
	For interoperability with a client unaware of the IEEE 802.11 extension a device shall retain
	its IEEE 802.11 configuration if the IEEE 802.11 configuration element isn’t present in the
	request. */
	SetNetworkInterfaces(request *SetNetworkInterfaces) (*SetNetworkInterfacesResponse, error)

	SetNetworkInterfacesContext(ctx context.Context, request *SetNetworkInterfaces) (*SetNetworkInterfacesResponse, error)

	/* This operation gets defined network protocols from a device. The device shall support the
	GetNetworkProtocols command returning configured network protocols. */
	GetNetworkProtocols(request *GetNetworkProtocols) (*GetNetworkProtocolsResponse, error)

	GetNetworkProtocolsContext(ctx context.Context, request *GetNetworkProtocols) (*GetNetworkProtocolsResponse, error)

	/* This operation configures defined network protocols on a device. The device shall support
	configuration of defined network protocols through the SetNetworkProtocols command. */
	SetNetworkProtocols(request *SetNetworkProtocols) (*SetNetworkProtocolsResponse, error)

	SetNetworkProtocolsContext(ctx context.Context, request *SetNetworkProtocols) (*SetNetworkProtocolsResponse, error)

	/* This operation gets the default gateway settings from a device. The device shall support the
	GetNetworkDefaultGateway command returning configured default gateway address(es). */
	GetNetworkDefaultGateway(request *GetNetworkDefaultGateway) (*GetNetworkDefaultGatewayResponse, error)

	GetNetworkDefaultGatewayContext(ctx context.Context, request *GetNetworkDefaultGateway) (*GetNetworkDefaultGatewayResponse, error)

	/* This operation sets the default gateway settings on a device. The device shall support
	configuration of default gateway through the SetNetworkDefaultGateway command. */
	SetNetworkDefaultGateway(request *SetNetworkDefaultGateway) (*SetNetworkDefaultGatewayResponse, error)

	SetNetworkDefaultGatewayContext(ctx context.Context, request *SetNetworkDefaultGateway) (*SetNetworkDefaultGatewayResponse, error)

	/* This operation gets the zero-configuration from a device. If the device supports dynamic IP
		configuration according to [RFC3927], it shall support the return of IPv4 zero configuration
		address and status through the GetZeroConfiguration command.
	Devices supporting zero configuration on more than one interface shall use the extension to list the additional interface settings. */
	GetZeroConfiguration(request *GetZeroConfiguration) (*GetZeroConfigurationResponse, error)

	GetZeroConfigurationContext(ctx context.Context, request *GetZeroConfiguration) (*GetZeroConfigurationResponse, error)

	/* This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration is supported or not. */
	SetZeroConfiguration(request *SetZeroConfiguration) (*SetZeroConfigurationResponse, error)

	SetZeroConfigurationContext(ctx context.Context, request *SetZeroConfiguration) (*SetZeroConfigurationResponse, error)

	/* This operation gets the IP address filter settings from a device. If the device supports device
	access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
	device shall support the GetIPAddressFilter command. */
	GetIPAddressFilter(request *GetIPAddressFilter) (*GetIPAddressFilterResponse, error)

	GetIPAddressFilterContext(ctx context.Context, request *GetIPAddressFilter) (*GetIPAddressFilterResponse, error)

	/* This operation sets the IP address filter settings on a device. If the device supports device
	access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
	device shall support configuration of IP filtering rules through the SetIPAddressFilter
	command. */
	SetIPAddressFilter(request *SetIPAddressFilter) (*SetIPAddressFilterResponse, error)

	SetIPAddressFilterContext(ctx context.Context, request *SetIPAddressFilter) (*SetIPAddressFilterResponse, error)

	/* This operation adds an IP filter address to a device. If the device supports device access
	control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
	shall support adding of IP filtering addresses through the AddIPAddressFilter command. */
	AddIPAddressFilter(request *AddIPAddressFilter) (*AddIPAddressFilterResponse, error)

	AddIPAddressFilterContext(ctx context.Context, request *AddIPAddressFilter) (*AddIPAddressFilterResponse, error)

	/* This operation deletes an IP filter address from a device. If the device supports device access
	control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
	shall support deletion of IP filtering addresses through the RemoveIPAddressFilter command. */
	RemoveIPAddressFilter(request *RemoveIPAddressFilter) (*RemoveIPAddressFilterResponse, error)

	RemoveIPAddressFilterContext(ctx context.Context, request *RemoveIPAddressFilter) (*RemoveIPAddressFilterResponse, error)

	/* Access to different services and sub-sets of services should be subject to access control. The
	WS-Security framework gives the prerequisite for end-point authentication. Authorization
	decisions can then be taken using an access security policy. This standard does not mandate
	any particular policy description format or security policy but this is up to the device
	manufacturer or system provider to choose policy and policy description format of choice.
	However, an access policy (in arbitrary format) can be requested using this command. If the
	device supports access policy settings based on WS-Security authentication, then the device
	shall support this command. */
	GetAccessPolicy(request *GetAccessPolicy) (*GetAccessPolicyResponse, error)

	GetAccessPolicyContext(ctx context.Context, request *GetAccessPolicy) (*GetAccessPolicyResponse, error)

	/* This command sets the device access security policy (for more details on the access security
	policy see the Get command). If the device supports access policy settings
	based on WS-Security authentication, then the device shall support this command. */
	SetAccessPolicy(request *SetAccessPolicy) (*SetAccessPolicyResponse, error)

	SetAccessPolicyContext(ctx context.Context, request *SetAccessPolicy) (*SetAccessPolicyResponse, error)

	/* This operation gets a list of all available relay outputs and their settings.
	This method has been depricated with version 2.0. Refer to the DeviceIO service. */
	GetRelayOutputs(request *GetRelayOutputs) (*GetRelayOutputsResponse, error)

	GetRelayOutputsContext(ctx context.Context, request *GetRelayOutputs) (*GetRelayOutputsResponse, error)

	/* This operation sets the settings of a relay output.
	This method has been depricated with version 2.0. Refer to the DeviceIO service. */
	SetRelayOutputSettings(request *SetRelayOutputSettings) (*SetRelayOutputSettingsResponse, error)

	SetRelayOutputSettingsContext(ctx context.Context, request *SetRelayOutputSettings) (*SetRelayOutputSettingsResponse, error)

	/* This operation sets the state of a relay output.
	This method has been depricated with version 2.0. Refer to the DeviceIO service. */
	SetRelayOutputState(request *SetRelayOutputState) (*SetRelayOutputStateResponse, error)

	SetRelayOutputStateContext(ctx context.Context, request *SetRelayOutputState) (*SetRelayOutputStateResponse, error)

	/* Manage auxiliary commands supported by a device, such as controlling an Infrared (IR) lamp,
	a heater or a wiper or a thermometer that is connected to the device.
	The supported commands can be retrieved via the AuxiliaryCommands capability.
	Although the name of the auxiliary commands can be freely defined, commands starting with the prefix tt: are
	reserved to define frequently used commands and these reserved commands shall all share the "tt:command|parameter" syntax.

	A device that indicates auxiliary service capability shall support this command. */
	SendAuxiliaryCommand(request *SendAuxiliaryCommand) (*SendAuxiliaryCommandResponse, error)

	SendAuxiliaryCommandContext(ctx context.Context, request *SendAuxiliaryCommand) (*SendAuxiliaryCommandResponse, error)

	/* This operation returns the IEEE802.11 capabilities. The device shall support
	this operation. */
	GetDot11Capabilities(request *GetDot11Capabilities) (*GetDot11CapabilitiesResponse, error)

	GetDot11CapabilitiesContext(ctx context.Context, request *GetDot11Capabilities) (*GetDot11CapabilitiesResponse, error)

	/* This operation returns the status of a wireless network interface. The device shall support this
	command. */
	GetDot11Status(request *GetDot11Status) (*GetDot11StatusResponse, error)

	GetDot11StatusContext(ctx context.Context, request *GetDot11Status) (*GetDot11StatusResponse, error)

	/* This operation returns a lists of the wireless networks in range of the device. A device should
	support this operation. */
	ScanAvailableDot11Networks(request *ScanAvailableDot11Networks) (*ScanAvailableDot11NetworksResponse, error)

	ScanAvailableDot11NetworksContext(ctx context.Context, request *ScanAvailableDot11Networks) (*ScanAvailableDot11NetworksResponse, error)

	/* This operation is used to retrieve URIs from which system information may be downloaded
	using HTTP. URIs may be returned for the following system information:
	System Logs. Multiple system logs may be returned, of different types. The exact format of
	the system logs is outside the scope of this specification.
	Support Information. This consists of arbitrary device diagnostics information from a device.
	The exact format of the diagnostic information is outside the scope of this specification.
	System Backup. The received file is a backup file that can be used to restore the current
	device configuration at a later date. The exact format of the backup configuration file is
	outside the scope of this specification.
	If the device allows retrieval of system logs, support information or system backup data, it
	should make them available via HTTP GET. If it does, it shall support the GetSystemUris
	command. */
	GetSystemUris(request *GetSystemUris) (*GetSystemUrisResponse, error)

	GetSystemUrisContext(ctx context.Context, request *GetSystemUris) (*GetSystemUrisResponse, error)

	/* This operation initiates a firmware upgrade using the HTTP POST mechanism. The response
	to the command includes an HTTP URL to which the upgrade file may be uploaded. The
	actual upgrade takes place as soon as the HTTP POST operation has completed. The device
	should support firmware upgrade through the StartFirmwareUpgrade command. The exact
	format of the firmware data is outside the scope of this specification.
	Firmware upgrade over HTTP may be achieved using the following steps:
	If the firmware upgrade fails because the upgrade file was invalid, the HTTP POST response
	shall be “415 Unsupported Media Type”. If the firmware upgrade fails due to an error at the
	device, the HTTP POST response shall be “500 Internal Server Error”.
	The value of the Content-Type header in the HTTP POST request shall be “application/octetstream”. */
	StartFirmwareUpgrade(request *StartFirmwareUpgrade) (*StartFirmwareUpgradeResponse, error)

	StartFirmwareUpgradeContext(ctx context.Context, request *StartFirmwareUpgrade) (*StartFirmwareUpgradeResponse, error)

	/* This operation initiates a system restore from backed up configuration data using the HTTP
	POST mechanism. The response to the command includes an HTTP URL to which the backup
	file may be uploaded. The actual restore takes place as soon as the HTTP POST operation
	has completed. Devices should support system restore through the StartSystemRestore
	command. The exact format of the backup configuration data is outside the scope of this
	specification.
	System restore over HTTP may be achieved using the following steps:
	If the system restore fails because the uploaded file was invalid, the HTTP POST response
	shall be “415 Unsupported Media Type”. If the system restore fails due to an error at the
	device, the HTTP POST response shall be “500 Internal Server Error”.
	The value of the Content-Type header in the HTTP POST request shall be “application/octetstream”. */
	StartSystemRestore(request *StartSystemRestore) (*StartSystemRestoreResponse, error)

	StartSystemRestoreContext(ctx context.Context, request *StartSystemRestore) (*StartSystemRestoreResponse, error)

	/*
		This operation lists all existing storage configurations for the device.
	*/
	GetStorageConfigurations(request *GetStorageConfigurations) (*GetStorageConfigurationsResponse, error)

	GetStorageConfigurationsContext(ctx context.Context, request *GetStorageConfigurations) (*GetStorageConfigurationsResponse, error)

	/*
		This operation creates a new storage configuration.
		The configuration data shall be created in the device and shall be persistent (remain after reboot).
	*/
	CreateStorageConfiguration(request *CreateStorageConfiguration) (*CreateStorageConfigurationResponse, error)

	CreateStorageConfigurationContext(ctx context.Context, request *CreateStorageConfiguration) (*CreateStorageConfigurationResponse, error)

	/*
		This operation retrieves the Storage configuration associated with the given storage configuration token.
	*/
	GetStorageConfiguration(request *GetStorageConfiguration) (*GetStorageConfigurationResponse, error)

	GetStorageConfigurationContext(ctx context.Context, request *GetStorageConfiguration) (*GetStorageConfigurationResponse, error)

	/*
		This operation modifies an existing Storage configuration.
	*/
	SetStorageConfiguration(request *SetStorageConfiguration) (*SetStorageConfigurationResponse, error)

	SetStorageConfigurationContext(ctx context.Context, request *SetStorageConfiguration) (*SetStorageConfigurationResponse, error)

	/*
		This operation deletes the given storage configuration and configuration change shall always be persistent.
	*/
	DeleteStorageConfiguration(request *DeleteStorageConfiguration) (*DeleteStorageConfigurationResponse, error)

	DeleteStorageConfigurationContext(ctx context.Context, request *DeleteStorageConfiguration) (*DeleteStorageConfigurationResponse, error)

	/*
		This operation lists all existing geo location configurations for the device.
	*/
	GetGeoLocation(request *GetGeoLocation) (*GetGeoLocationResponse, error)

	GetGeoLocationContext(ctx context.Context, request *GetGeoLocation) (*GetGeoLocationResponse, error)

	/*
		This operation allows to modify one or more geo configuration entries.
	*/
	SetGeoLocation(request *SetGeoLocation) (*SetGeoLocationResponse, error)

	SetGeoLocationContext(ctx context.Context, request *SetGeoLocation) (*SetGeoLocationResponse, error)

	/*
		This operation deletes the given geo location entries.
	*/
	DeleteGeoLocation(request *DeleteGeoLocation) (*DeleteGeoLocationResponse, error)

	DeleteGeoLocationContext(ctx context.Context, request *DeleteGeoLocation) (*DeleteGeoLocationResponse, error)

	CreateCertificate(request *CreateCertificate) (*CreateCertificateResponse, error)

	CreateCertificateContext(ctx context.Context, request *CreateCertificate) (*CreateCertificateResponse, error)

	GetCertificates(request *GetCertificates) (*GetCertificatesResponse, error)

	GetCertificatesContext(ctx context.Context, request *GetCertificates) (*GetCertificatesResponse, error)

	GetCertificatesStatus(request *GetCertificatesStatus) (*GetCertificatesStatusResponse, error)

	GetCertificatesStatusContext(ctx context.Context, request *GetCertificatesStatus) (*GetCertificatesStatusResponse, error)

	SetCertificatesStatus(request *SetCertificatesStatus) (*SetCertificatesStatusResponse, error)

	SetCertificatesStatusContext(ctx context.Context, request *SetCertificatesStatus) (*SetCertificatesStatusResponse, error)

	DeleteCertificates(request *DeleteCertificates) (*DeleteCertificatesResponse, error)

	DeleteCertificatesContext(ctx context.Context, request *DeleteCertificates) (*DeleteCertificatesResponse, error)

	GetPkcs10Request(request *GetPkcs10Request) (*GetPkcs10RequestResponse, error)

	GetPkcs10RequestContext(ctx context.Context, request *GetPkcs10Request) (*GetPkcs10RequestResponse, error)

	LoadCertificates(request *LoadCertificates) (*LoadCertificatesResponse, error)

	LoadCertificatesContext(ctx context.Context, request *LoadCertificates) (*LoadCertificatesResponse, error)

	GetClientCertificateMode(request *GetClientCertificateMode) (*GetClientCertificateModeResponse, error)

	GetClientCertificateModeContext(ctx context.Context, request *GetClientCertificateMode) (*GetClientCertificateModeResponse, error)

	SetClientCertificateMode(request *SetClientCertificateMode) (*SetClientCertificateModeResponse, error)

	SetClientCertificateModeContext(ctx context.Context, request *SetClientCertificateMode) (*SetClientCertificateModeResponse, error)

	GetCACertificates(request *GetCACertificates) (*GetCACertificatesResponse, error)

	GetCACertificatesContext(ctx context.Context, request *GetCACertificates) (*GetCACertificatesResponse, error)

	LoadCertificateWithPrivateKey(request *LoadCertificateWithPrivateKey) (*LoadCertificateWithPrivateKeyResponse, error)

	LoadCertificateWithPrivateKeyContext(ctx context.Context, request *LoadCertificateWithPrivateKey) (*LoadCertificateWithPrivateKeyResponse, error)

	GetCertificateInformation(request *GetCertificateInformation) (*GetCertificateInformationResponse, error)

	GetCertificateInformationContext(ctx context.Context, request *GetCertificateInformation) (*GetCertificateInformationResponse, error)

	LoadCACertificates(request *LoadCACertificates) (*LoadCACertificatesResponse, error)

	LoadCACertificatesContext(ctx context.Context, request *LoadCACertificates) (*LoadCACertificatesResponse, error)

	CreateDot1XConfiguration(request *CreateDot1XConfiguration) (*CreateDot1XConfigurationResponse, error)

	CreateDot1XConfigurationContext(ctx context.Context, request *CreateDot1XConfiguration) (*CreateDot1XConfigurationResponse, error)

	SetDot1XConfiguration(request *SetDot1XConfiguration) (*SetDot1XConfigurationResponse, error)

	SetDot1XConfigurationContext(ctx context.Context, request *SetDot1XConfiguration) (*SetDot1XConfigurationResponse, error)

	GetDot1XConfiguration(request *GetDot1XConfiguration) (*GetDot1XConfigurationResponse, error)

	GetDot1XConfigurationContext(ctx context.Context, request *GetDot1XConfiguration) (*GetDot1XConfigurationResponse, error)

	GetDot1XConfigurations(request *GetDot1XConfigurations) (*GetDot1XConfigurationsResponse, error)

	GetDot1XConfigurationsContext(ctx context.Context, request *GetDot1XConfigurations) (*GetDot1XConfigurationsResponse, error)

	DeleteDot1XConfiguration(request *DeleteDot1XConfiguration) (*DeleteDot1XConfigurationResponse, error)

	DeleteDot1XConfigurationContext(ctx context.Context, request *DeleteDot1XConfiguration) (*DeleteDot1XConfigurationResponse, error)
}

type device struct {
	client *soap.Client
}

func NewDevice(client *soap.Client) Device {
	return &device{
		client: client,
	}
}

func (service *device) GetServicesContext(ctx context.Context, request *GetServices) (*GetServicesResponse, error) {
	response := new(GetServicesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetServices(request *GetServices) (*GetServicesResponse, error) {
	return service.GetServicesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetServiceCapabilitiesContext(ctx context.Context, request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error) {
	response := new(GetServiceCapabilitiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetServiceCapabilities(request *GetServiceCapabilities) (*GetServiceCapabilitiesResponse, error) {
	return service.GetServiceCapabilitiesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetDeviceInformationContext(ctx context.Context, request *GetDeviceInformation) (*GetDeviceInformationResponse, error) {
	response := new(GetDeviceInformationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetDeviceInformation(request *GetDeviceInformation) (*GetDeviceInformationResponse, error) {
	return service.GetDeviceInformationContext(
		context.Background(),
		request,
	)
}

func (service *device) SetSystemDateAndTimeContext(ctx context.Context, request *SetSystemDateAndTime) (*SetSystemDateAndTimeResponse, error) {
	response := new(SetSystemDateAndTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetSystemDateAndTime(request *SetSystemDateAndTime) (*SetSystemDateAndTimeResponse, error) {
	return service.SetSystemDateAndTimeContext(
		context.Background(),
		request,
	)
}

func (service *device) GetSystemDateAndTimeContext(ctx context.Context, request *GetSystemDateAndTime) (*GetSystemDateAndTimeResponse, error) {
	response := new(GetSystemDateAndTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetSystemDateAndTime(request *GetSystemDateAndTime) (*GetSystemDateAndTimeResponse, error) {
	return service.GetSystemDateAndTimeContext(
		context.Background(),
		request,
	)
}

func (service *device) SetSystemFactoryDefaultContext(ctx context.Context, request *SetSystemFactoryDefault) (*SetSystemFactoryDefaultResponse, error) {
	response := new(SetSystemFactoryDefaultResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetSystemFactoryDefault(request *SetSystemFactoryDefault) (*SetSystemFactoryDefaultResponse, error) {
	return service.SetSystemFactoryDefaultContext(
		context.Background(),
		request,
	)
}

func (service *device) UpgradeSystemFirmwareContext(ctx context.Context, request *UpgradeSystemFirmware) (*UpgradeSystemFirmwareResponse, error) {
	response := new(UpgradeSystemFirmwareResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) UpgradeSystemFirmware(request *UpgradeSystemFirmware) (*UpgradeSystemFirmwareResponse, error) {
	return service.UpgradeSystemFirmwareContext(
		context.Background(),
		request,
	)
}

func (service *device) SystemRebootContext(ctx context.Context, request *SystemReboot) (*SystemRebootResponse, error) {
	response := new(SystemRebootResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SystemReboot(request *SystemReboot) (*SystemRebootResponse, error) {
	return service.SystemRebootContext(
		context.Background(),
		request,
	)
}

func (service *device) RestoreSystemContext(ctx context.Context, request *RestoreSystem) (*RestoreSystemResponse, error) {
	response := new(RestoreSystemResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) RestoreSystem(request *RestoreSystem) (*RestoreSystemResponse, error) {
	return service.RestoreSystemContext(
		context.Background(),
		request,
	)
}

func (service *device) GetSystemBackupContext(ctx context.Context, request *GetSystemBackup) (*GetSystemBackupResponse, error) {
	response := new(GetSystemBackupResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetSystemBackup(request *GetSystemBackup) (*GetSystemBackupResponse, error) {
	return service.GetSystemBackupContext(
		context.Background(),
		request,
	)
}

func (service *device) GetSystemLogContext(ctx context.Context, request *GetSystemLog) (*GetSystemLogResponse, error) {
	response := new(GetSystemLogResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetSystemLog(request *GetSystemLog) (*GetSystemLogResponse, error) {
	return service.GetSystemLogContext(
		context.Background(),
		request,
	)
}

func (service *device) GetSystemSupportInformationContext(ctx context.Context, request *GetSystemSupportInformation) (*GetSystemSupportInformationResponse, error) {
	response := new(GetSystemSupportInformationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetSystemSupportInformation(request *GetSystemSupportInformation) (*GetSystemSupportInformationResponse, error) {
	return service.GetSystemSupportInformationContext(
		context.Background(),
		request,
	)
}

func (service *device) GetScopesContext(ctx context.Context, request *GetScopes) (*GetScopesResponse, error) {
	response := new(GetScopesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetScopes(request *GetScopes) (*GetScopesResponse, error) {
	return service.GetScopesContext(
		context.Background(),
		request,
	)
}

func (service *device) SetScopesContext(ctx context.Context, request *SetScopes) (*SetScopesResponse, error) {
	response := new(SetScopesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetScopes(request *SetScopes) (*SetScopesResponse, error) {
	return service.SetScopesContext(
		context.Background(),
		request,
	)
}

func (service *device) AddScopesContext(ctx context.Context, request *AddScopes) (*AddScopesResponse, error) {
	response := new(AddScopesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) AddScopes(request *AddScopes) (*AddScopesResponse, error) {
	return service.AddScopesContext(
		context.Background(),
		request,
	)
}

func (service *device) RemoveScopesContext(ctx context.Context, request *RemoveScopes) (*RemoveScopesResponse, error) {
	response := new(RemoveScopesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) RemoveScopes(request *RemoveScopes) (*RemoveScopesResponse, error) {
	return service.RemoveScopesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetDiscoveryModeContext(ctx context.Context, request *GetDiscoveryMode) (*GetDiscoveryModeResponse, error) {
	response := new(GetDiscoveryModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetDiscoveryMode(request *GetDiscoveryMode) (*GetDiscoveryModeResponse, error) {
	return service.GetDiscoveryModeContext(
		context.Background(),
		request,
	)
}

func (service *device) SetDiscoveryModeContext(ctx context.Context, request *SetDiscoveryMode) (*SetDiscoveryModeResponse, error) {
	response := new(SetDiscoveryModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetDiscoveryMode(request *SetDiscoveryMode) (*SetDiscoveryModeResponse, error) {
	return service.SetDiscoveryModeContext(
		context.Background(),
		request,
	)
}

func (service *device) GetRemoteDiscoveryModeContext(ctx context.Context, request *GetRemoteDiscoveryMode) (*GetRemoteDiscoveryModeResponse, error) {
	response := new(GetRemoteDiscoveryModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetRemoteDiscoveryMode(request *GetRemoteDiscoveryMode) (*GetRemoteDiscoveryModeResponse, error) {
	return service.GetRemoteDiscoveryModeContext(
		context.Background(),
		request,
	)
}

func (service *device) SetRemoteDiscoveryModeContext(ctx context.Context, request *SetRemoteDiscoveryMode) (*SetRemoteDiscoveryModeResponse, error) {
	response := new(SetRemoteDiscoveryModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetRemoteDiscoveryMode(request *SetRemoteDiscoveryMode) (*SetRemoteDiscoveryModeResponse, error) {
	return service.SetRemoteDiscoveryModeContext(
		context.Background(),
		request,
	)
}

func (service *device) GetDPAddressesContext(ctx context.Context, request *GetDPAddresses) (*GetDPAddressesResponse, error) {
	response := new(GetDPAddressesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetDPAddresses(request *GetDPAddresses) (*GetDPAddressesResponse, error) {
	return service.GetDPAddressesContext(
		context.Background(),
		request,
	)
}

func (service *device) SetDPAddressesContext(ctx context.Context, request *SetDPAddresses) (*SetDPAddressesResponse, error) {
	response := new(SetDPAddressesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetDPAddresses(request *SetDPAddresses) (*SetDPAddressesResponse, error) {
	return service.SetDPAddressesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetEndpointReferenceContext(ctx context.Context, request *GetEndpointReference) (*GetEndpointReferenceResponse, error) {
	response := new(GetEndpointReferenceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetEndpointReference(request *GetEndpointReference) (*GetEndpointReferenceResponse, error) {
	return service.GetEndpointReferenceContext(
		context.Background(),
		request,
	)
}

func (service *device) GetRemoteUserContext(ctx context.Context, request *GetRemoteUser) (*GetRemoteUserResponse, error) {
	response := new(GetRemoteUserResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetRemoteUser(request *GetRemoteUser) (*GetRemoteUserResponse, error) {
	return service.GetRemoteUserContext(
		context.Background(),
		request,
	)
}

func (service *device) SetRemoteUserContext(ctx context.Context, request *SetRemoteUser) (*SetRemoteUserResponse, error) {
	response := new(SetRemoteUserResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetRemoteUser(request *SetRemoteUser) (*SetRemoteUserResponse, error) {
	return service.SetRemoteUserContext(
		context.Background(),
		request,
	)
}

func (service *device) GetUsersContext(ctx context.Context, request *GetUsers) (*GetUsersResponse, error) {
	response := new(GetUsersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetUsers(request *GetUsers) (*GetUsersResponse, error) {
	return service.GetUsersContext(
		context.Background(),
		request,
	)
}

func (service *device) CreateUsersContext(ctx context.Context, request *CreateUsers) (*CreateUsersResponse, error) {
	response := new(CreateUsersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) CreateUsers(request *CreateUsers) (*CreateUsersResponse, error) {
	return service.CreateUsersContext(
		context.Background(),
		request,
	)
}

func (service *device) DeleteUsersContext(ctx context.Context, request *DeleteUsers) (*DeleteUsersResponse, error) {
	response := new(DeleteUsersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) DeleteUsers(request *DeleteUsers) (*DeleteUsersResponse, error) {
	return service.DeleteUsersContext(
		context.Background(),
		request,
	)
}

func (service *device) SetUserContext(ctx context.Context, request *SetUser) (*SetUserResponse, error) {
	response := new(SetUserResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetUser(request *SetUser) (*SetUserResponse, error) {
	return service.SetUserContext(
		context.Background(),
		request,
	)
}

func (service *device) GetWsdlUrlContext(ctx context.Context, request *GetWsdlUrl) (*GetWsdlUrlResponse, error) {
	response := new(GetWsdlUrlResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetWsdlUrl(request *GetWsdlUrl) (*GetWsdlUrlResponse, error) {
	return service.GetWsdlUrlContext(
		context.Background(),
		request,
	)
}

func (service *device) GetPasswordComplexityOptionsContext(ctx context.Context, request *GetPasswordComplexityOptions) (*GetPasswordComplexityOptionsResponse, error) {
	response := new(GetPasswordComplexityOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetPasswordComplexityOptions(request *GetPasswordComplexityOptions) (*GetPasswordComplexityOptionsResponse, error) {
	return service.GetPasswordComplexityOptionsContext(
		context.Background(),
		request,
	)
}

func (service *device) GetPasswordComplexityConfigurationContext(ctx context.Context, request *GetPasswordComplexityConfiguration) (*GetPasswordComplexityConfigurationResponse, error) {
	response := new(GetPasswordComplexityConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetPasswordComplexityConfiguration(request *GetPasswordComplexityConfiguration) (*GetPasswordComplexityConfigurationResponse, error) {
	return service.GetPasswordComplexityConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) SetPasswordComplexityConfigurationContext(ctx context.Context, request *SetPasswordComplexityConfiguration) (*SetPasswordComplexityConfigurationResponse, error) {
	response := new(SetPasswordComplexityConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetPasswordComplexityConfiguration(request *SetPasswordComplexityConfiguration) (*SetPasswordComplexityConfigurationResponse, error) {
	return service.SetPasswordComplexityConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) GetPasswordHistoryConfigurationContext(ctx context.Context, request *GetPasswordHistoryConfiguration) (*GetPasswordHistoryConfigurationResponse, error) {
	response := new(GetPasswordHistoryConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetPasswordHistoryConfiguration(request *GetPasswordHistoryConfiguration) (*GetPasswordHistoryConfigurationResponse, error) {
	return service.GetPasswordHistoryConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) SetPasswordHistoryConfigurationContext(ctx context.Context, request *SetPasswordHistoryConfiguration) (*SetPasswordHistoryConfigurationResponse, error) {
	response := new(SetPasswordHistoryConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetPasswordHistoryConfiguration(request *SetPasswordHistoryConfiguration) (*SetPasswordHistoryConfigurationResponse, error) {
	return service.SetPasswordHistoryConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) GetAuthFailureWarningOptionsContext(ctx context.Context, request *GetAuthFailureWarningOptions) (*GetAuthFailureWarningOptionsResponse, error) {
	response := new(GetAuthFailureWarningOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetAuthFailureWarningOptions(request *GetAuthFailureWarningOptions) (*GetAuthFailureWarningOptionsResponse, error) {
	return service.GetAuthFailureWarningOptionsContext(
		context.Background(),
		request,
	)
}

func (service *device) GetAuthFailureWarningConfigurationContext(ctx context.Context, request *GetAuthFailureWarningConfiguration) (*GetAuthFailureWarningConfigurationResponse, error) {
	response := new(GetAuthFailureWarningConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetAuthFailureWarningConfiguration(request *GetAuthFailureWarningConfiguration) (*GetAuthFailureWarningConfigurationResponse, error) {
	return service.GetAuthFailureWarningConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) SetAuthFailureWarningConfigurationContext(ctx context.Context, request *SetAuthFailureWarningConfiguration) (*SetAuthFailureWarningConfigurationResponse, error) {
	response := new(SetAuthFailureWarningConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetAuthFailureWarningConfiguration(request *SetAuthFailureWarningConfiguration) (*SetAuthFailureWarningConfigurationResponse, error) {
	return service.SetAuthFailureWarningConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) GetCapabilitiesContext(ctx context.Context, request *GetCapabilities) (*GetCapabilitiesResponse, error) {
	response := new(GetCapabilitiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetCapabilities(request *GetCapabilities) (*GetCapabilitiesResponse, error) {
	return service.GetCapabilitiesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetHostnameContext(ctx context.Context, request *GetHostname) (*GetHostnameResponse, error) {
	response := new(GetHostnameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetHostname(request *GetHostname) (*GetHostnameResponse, error) {
	return service.GetHostnameContext(
		context.Background(),
		request,
	)
}

func (service *device) SetHostnameContext(ctx context.Context, request *SetHostname) (*SetHostnameResponse, error) {
	response := new(SetHostnameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetHostname(request *SetHostname) (*SetHostnameResponse, error) {
	return service.SetHostnameContext(
		context.Background(),
		request,
	)
}

func (service *device) SetHostnameFromDHCPContext(ctx context.Context, request *SetHostnameFromDHCP) (*SetHostnameFromDHCPResponse, error) {
	response := new(SetHostnameFromDHCPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetHostnameFromDHCP(request *SetHostnameFromDHCP) (*SetHostnameFromDHCPResponse, error) {
	return service.SetHostnameFromDHCPContext(
		context.Background(),
		request,
	)
}

func (service *device) GetDNSContext(ctx context.Context, request *GetDNS) (*GetDNSResponse, error) {
	response := new(GetDNSResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetDNS(request *GetDNS) (*GetDNSResponse, error) {
	return service.GetDNSContext(
		context.Background(),
		request,
	)
}

func (service *device) SetDNSContext(ctx context.Context, request *SetDNS) (*SetDNSResponse, error) {
	response := new(SetDNSResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetDNS(request *SetDNS) (*SetDNSResponse, error) {
	return service.SetDNSContext(
		context.Background(),
		request,
	)
}

func (service *device) GetNTPContext(ctx context.Context, request *GetNTP) (*GetNTPResponse, error) {
	response := new(GetNTPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetNTP(request *GetNTP) (*GetNTPResponse, error) {
	return service.GetNTPContext(
		context.Background(),
		request,
	)
}

func (service *device) SetNTPContext(ctx context.Context, request *SetNTP) (*SetNTPResponse, error) {
	response := new(SetNTPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetNTP(request *SetNTP) (*SetNTPResponse, error) {
	return service.SetNTPContext(
		context.Background(),
		request,
	)
}

func (service *device) GetDynamicDNSContext(ctx context.Context, request *GetDynamicDNS) (*GetDynamicDNSResponse, error) {
	response := new(GetDynamicDNSResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetDynamicDNS(request *GetDynamicDNS) (*GetDynamicDNSResponse, error) {
	return service.GetDynamicDNSContext(
		context.Background(),
		request,
	)
}

func (service *device) SetDynamicDNSContext(ctx context.Context, request *SetDynamicDNS) (*SetDynamicDNSResponse, error) {
	response := new(SetDynamicDNSResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetDynamicDNS(request *SetDynamicDNS) (*SetDynamicDNSResponse, error) {
	return service.SetDynamicDNSContext(
		context.Background(),
		request,
	)
}

func (service *device) GetNetworkInterfacesContext(ctx context.Context, request *GetNetworkInterfaces) (*GetNetworkInterfacesResponse, error) {
	response := new(GetNetworkInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetNetworkInterfaces(request *GetNetworkInterfaces) (*GetNetworkInterfacesResponse, error) {
	return service.GetNetworkInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *device) SetNetworkInterfacesContext(ctx context.Context, request *SetNetworkInterfaces) (*SetNetworkInterfacesResponse, error) {
	response := new(SetNetworkInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetNetworkInterfaces(request *SetNetworkInterfaces) (*SetNetworkInterfacesResponse, error) {
	return service.SetNetworkInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetNetworkProtocolsContext(ctx context.Context, request *GetNetworkProtocols) (*GetNetworkProtocolsResponse, error) {
	response := new(GetNetworkProtocolsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetNetworkProtocols(request *GetNetworkProtocols) (*GetNetworkProtocolsResponse, error) {
	return service.GetNetworkProtocolsContext(
		context.Background(),
		request,
	)
}

func (service *device) SetNetworkProtocolsContext(ctx context.Context, request *SetNetworkProtocols) (*SetNetworkProtocolsResponse, error) {
	response := new(SetNetworkProtocolsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetNetworkProtocols(request *SetNetworkProtocols) (*SetNetworkProtocolsResponse, error) {
	return service.SetNetworkProtocolsContext(
		context.Background(),
		request,
	)
}

func (service *device) GetNetworkDefaultGatewayContext(ctx context.Context, request *GetNetworkDefaultGateway) (*GetNetworkDefaultGatewayResponse, error) {
	response := new(GetNetworkDefaultGatewayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetNetworkDefaultGateway(request *GetNetworkDefaultGateway) (*GetNetworkDefaultGatewayResponse, error) {
	return service.GetNetworkDefaultGatewayContext(
		context.Background(),
		request,
	)
}

func (service *device) SetNetworkDefaultGatewayContext(ctx context.Context, request *SetNetworkDefaultGateway) (*SetNetworkDefaultGatewayResponse, error) {
	response := new(SetNetworkDefaultGatewayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetNetworkDefaultGateway(request *SetNetworkDefaultGateway) (*SetNetworkDefaultGatewayResponse, error) {
	return service.SetNetworkDefaultGatewayContext(
		context.Background(),
		request,
	)
}

func (service *device) GetZeroConfigurationContext(ctx context.Context, request *GetZeroConfiguration) (*GetZeroConfigurationResponse, error) {
	response := new(GetZeroConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetZeroConfiguration(request *GetZeroConfiguration) (*GetZeroConfigurationResponse, error) {
	return service.GetZeroConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) SetZeroConfigurationContext(ctx context.Context, request *SetZeroConfiguration) (*SetZeroConfigurationResponse, error) {
	response := new(SetZeroConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetZeroConfiguration(request *SetZeroConfiguration) (*SetZeroConfigurationResponse, error) {
	return service.SetZeroConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) GetIPAddressFilterContext(ctx context.Context, request *GetIPAddressFilter) (*GetIPAddressFilterResponse, error) {
	response := new(GetIPAddressFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetIPAddressFilter(request *GetIPAddressFilter) (*GetIPAddressFilterResponse, error) {
	return service.GetIPAddressFilterContext(
		context.Background(),
		request,
	)
}

func (service *device) SetIPAddressFilterContext(ctx context.Context, request *SetIPAddressFilter) (*SetIPAddressFilterResponse, error) {
	response := new(SetIPAddressFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetIPAddressFilter(request *SetIPAddressFilter) (*SetIPAddressFilterResponse, error) {
	return service.SetIPAddressFilterContext(
		context.Background(),
		request,
	)
}

func (service *device) AddIPAddressFilterContext(ctx context.Context, request *AddIPAddressFilter) (*AddIPAddressFilterResponse, error) {
	response := new(AddIPAddressFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) AddIPAddressFilter(request *AddIPAddressFilter) (*AddIPAddressFilterResponse, error) {
	return service.AddIPAddressFilterContext(
		context.Background(),
		request,
	)
}

func (service *device) RemoveIPAddressFilterContext(ctx context.Context, request *RemoveIPAddressFilter) (*RemoveIPAddressFilterResponse, error) {
	response := new(RemoveIPAddressFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) RemoveIPAddressFilter(request *RemoveIPAddressFilter) (*RemoveIPAddressFilterResponse, error) {
	return service.RemoveIPAddressFilterContext(
		context.Background(),
		request,
	)
}

func (service *device) GetAccessPolicyContext(ctx context.Context, request *GetAccessPolicy) (*GetAccessPolicyResponse, error) {
	response := new(GetAccessPolicyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetAccessPolicy(request *GetAccessPolicy) (*GetAccessPolicyResponse, error) {
	return service.GetAccessPolicyContext(
		context.Background(),
		request,
	)
}

func (service *device) SetAccessPolicyContext(ctx context.Context, request *SetAccessPolicy) (*SetAccessPolicyResponse, error) {
	response := new(SetAccessPolicyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetAccessPolicy(request *SetAccessPolicy) (*SetAccessPolicyResponse, error) {
	return service.SetAccessPolicyContext(
		context.Background(),
		request,
	)
}

func (service *device) GetRelayOutputsContext(ctx context.Context, request *GetRelayOutputs) (*GetRelayOutputsResponse, error) {
	response := new(GetRelayOutputsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetRelayOutputs(request *GetRelayOutputs) (*GetRelayOutputsResponse, error) {
	return service.GetRelayOutputsContext(
		context.Background(),
		request,
	)
}

func (service *device) SetRelayOutputSettingsContext(ctx context.Context, request *SetRelayOutputSettings) (*SetRelayOutputSettingsResponse, error) {
	response := new(SetRelayOutputSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetRelayOutputSettings(request *SetRelayOutputSettings) (*SetRelayOutputSettingsResponse, error) {
	return service.SetRelayOutputSettingsContext(
		context.Background(),
		request,
	)
}

func (service *device) SetRelayOutputStateContext(ctx context.Context, request *SetRelayOutputState) (*SetRelayOutputStateResponse, error) {
	response := new(SetRelayOutputStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetRelayOutputState(request *SetRelayOutputState) (*SetRelayOutputStateResponse, error) {
	return service.SetRelayOutputStateContext(
		context.Background(),
		request,
	)
}

func (service *device) SendAuxiliaryCommandContext(ctx context.Context, request *SendAuxiliaryCommand) (*SendAuxiliaryCommandResponse, error) {
	response := new(SendAuxiliaryCommandResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SendAuxiliaryCommand(request *SendAuxiliaryCommand) (*SendAuxiliaryCommandResponse, error) {
	return service.SendAuxiliaryCommandContext(
		context.Background(),
		request,
	)
}

func (service *device) GetDot11CapabilitiesContext(ctx context.Context, request *GetDot11Capabilities) (*GetDot11CapabilitiesResponse, error) {
	response := new(GetDot11CapabilitiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetDot11Capabilities(request *GetDot11Capabilities) (*GetDot11CapabilitiesResponse, error) {
	return service.GetDot11CapabilitiesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetDot11StatusContext(ctx context.Context, request *GetDot11Status) (*GetDot11StatusResponse, error) {
	response := new(GetDot11StatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetDot11Status(request *GetDot11Status) (*GetDot11StatusResponse, error) {
	return service.GetDot11StatusContext(
		context.Background(),
		request,
	)
}

func (service *device) ScanAvailableDot11NetworksContext(ctx context.Context, request *ScanAvailableDot11Networks) (*ScanAvailableDot11NetworksResponse, error) {
	response := new(ScanAvailableDot11NetworksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) ScanAvailableDot11Networks(request *ScanAvailableDot11Networks) (*ScanAvailableDot11NetworksResponse, error) {
	return service.ScanAvailableDot11NetworksContext(
		context.Background(),
		request,
	)
}

func (service *device) GetSystemUrisContext(ctx context.Context, request *GetSystemUris) (*GetSystemUrisResponse, error) {
	response := new(GetSystemUrisResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetSystemUris(request *GetSystemUris) (*GetSystemUrisResponse, error) {
	return service.GetSystemUrisContext(
		context.Background(),
		request,
	)
}

func (service *device) StartFirmwareUpgradeContext(ctx context.Context, request *StartFirmwareUpgrade) (*StartFirmwareUpgradeResponse, error) {
	response := new(StartFirmwareUpgradeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) StartFirmwareUpgrade(request *StartFirmwareUpgrade) (*StartFirmwareUpgradeResponse, error) {
	return service.StartFirmwareUpgradeContext(
		context.Background(),
		request,
	)
}

func (service *device) StartSystemRestoreContext(ctx context.Context, request *StartSystemRestore) (*StartSystemRestoreResponse, error) {
	response := new(StartSystemRestoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) StartSystemRestore(request *StartSystemRestore) (*StartSystemRestoreResponse, error) {
	return service.StartSystemRestoreContext(
		context.Background(),
		request,
	)
}

func (service *device) GetStorageConfigurationsContext(ctx context.Context, request *GetStorageConfigurations) (*GetStorageConfigurationsResponse, error) {
	response := new(GetStorageConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetStorageConfigurations(request *GetStorageConfigurations) (*GetStorageConfigurationsResponse, error) {
	return service.GetStorageConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *device) CreateStorageConfigurationContext(ctx context.Context, request *CreateStorageConfiguration) (*CreateStorageConfigurationResponse, error) {
	response := new(CreateStorageConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) CreateStorageConfiguration(request *CreateStorageConfiguration) (*CreateStorageConfigurationResponse, error) {
	return service.CreateStorageConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) GetStorageConfigurationContext(ctx context.Context, request *GetStorageConfiguration) (*GetStorageConfigurationResponse, error) {
	response := new(GetStorageConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetStorageConfiguration(request *GetStorageConfiguration) (*GetStorageConfigurationResponse, error) {
	return service.GetStorageConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) SetStorageConfigurationContext(ctx context.Context, request *SetStorageConfiguration) (*SetStorageConfigurationResponse, error) {
	response := new(SetStorageConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetStorageConfiguration(request *SetStorageConfiguration) (*SetStorageConfigurationResponse, error) {
	return service.SetStorageConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) DeleteStorageConfigurationContext(ctx context.Context, request *DeleteStorageConfiguration) (*DeleteStorageConfigurationResponse, error) {
	response := new(DeleteStorageConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) DeleteStorageConfiguration(request *DeleteStorageConfiguration) (*DeleteStorageConfigurationResponse, error) {
	return service.DeleteStorageConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) GetGeoLocationContext(ctx context.Context, request *GetGeoLocation) (*GetGeoLocationResponse, error) {
	response := new(GetGeoLocationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetGeoLocation(request *GetGeoLocation) (*GetGeoLocationResponse, error) {
	return service.GetGeoLocationContext(
		context.Background(),
		request,
	)
}

func (service *device) SetGeoLocationContext(ctx context.Context, request *SetGeoLocation) (*SetGeoLocationResponse, error) {
	response := new(SetGeoLocationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetGeoLocation(request *SetGeoLocation) (*SetGeoLocationResponse, error) {
	return service.SetGeoLocationContext(
		context.Background(),
		request,
	)
}

func (service *device) DeleteGeoLocationContext(ctx context.Context, request *DeleteGeoLocation) (*DeleteGeoLocationResponse, error) {
	response := new(DeleteGeoLocationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) DeleteGeoLocation(request *DeleteGeoLocation) (*DeleteGeoLocationResponse, error) {
	return service.DeleteGeoLocationContext(
		context.Background(),
		request,
	)
}

func (service *device) CreateCertificateContext(ctx context.Context, request *CreateCertificate) (*CreateCertificateResponse, error) {
	response := new(CreateCertificateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) CreateCertificate(request *CreateCertificate) (*CreateCertificateResponse, error) {
	return service.CreateCertificateContext(
		context.Background(),
		request,
	)
}

func (service *device) GetCertificatesContext(ctx context.Context, request *GetCertificates) (*GetCertificatesResponse, error) {
	response := new(GetCertificatesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetCertificates(request *GetCertificates) (*GetCertificatesResponse, error) {
	return service.GetCertificatesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetCertificatesStatusContext(ctx context.Context, request *GetCertificatesStatus) (*GetCertificatesStatusResponse, error) {
	response := new(GetCertificatesStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetCertificatesStatus(request *GetCertificatesStatus) (*GetCertificatesStatusResponse, error) {
	return service.GetCertificatesStatusContext(
		context.Background(),
		request,
	)
}

func (service *device) SetCertificatesStatusContext(ctx context.Context, request *SetCertificatesStatus) (*SetCertificatesStatusResponse, error) {
	response := new(SetCertificatesStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetCertificatesStatus(request *SetCertificatesStatus) (*SetCertificatesStatusResponse, error) {
	return service.SetCertificatesStatusContext(
		context.Background(),
		request,
	)
}

func (service *device) DeleteCertificatesContext(ctx context.Context, request *DeleteCertificates) (*DeleteCertificatesResponse, error) {
	response := new(DeleteCertificatesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) DeleteCertificates(request *DeleteCertificates) (*DeleteCertificatesResponse, error) {
	return service.DeleteCertificatesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetPkcs10RequestContext(ctx context.Context, request *GetPkcs10Request) (*GetPkcs10RequestResponse, error) {
	response := new(GetPkcs10RequestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetPkcs10Request(request *GetPkcs10Request) (*GetPkcs10RequestResponse, error) {
	return service.GetPkcs10RequestContext(
		context.Background(),
		request,
	)
}

func (service *device) LoadCertificatesContext(ctx context.Context, request *LoadCertificates) (*LoadCertificatesResponse, error) {
	response := new(LoadCertificatesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) LoadCertificates(request *LoadCertificates) (*LoadCertificatesResponse, error) {
	return service.LoadCertificatesContext(
		context.Background(),
		request,
	)
}

func (service *device) GetClientCertificateModeContext(ctx context.Context, request *GetClientCertificateMode) (*GetClientCertificateModeResponse, error) {
	response := new(GetClientCertificateModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetClientCertificateMode(request *GetClientCertificateMode) (*GetClientCertificateModeResponse, error) {
	return service.GetClientCertificateModeContext(
		context.Background(),
		request,
	)
}

func (service *device) SetClientCertificateModeContext(ctx context.Context, request *SetClientCertificateMode) (*SetClientCertificateModeResponse, error) {
	response := new(SetClientCertificateModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetClientCertificateMode(request *SetClientCertificateMode) (*SetClientCertificateModeResponse, error) {
	return service.SetClientCertificateModeContext(
		context.Background(),
		request,
	)
}

func (service *device) GetCACertificatesContext(ctx context.Context, request *GetCACertificates) (*GetCACertificatesResponse, error) {
	response := new(GetCACertificatesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetCACertificates(request *GetCACertificates) (*GetCACertificatesResponse, error) {
	return service.GetCACertificatesContext(
		context.Background(),
		request,
	)
}

func (service *device) LoadCertificateWithPrivateKeyContext(ctx context.Context, request *LoadCertificateWithPrivateKey) (*LoadCertificateWithPrivateKeyResponse, error) {
	response := new(LoadCertificateWithPrivateKeyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) LoadCertificateWithPrivateKey(request *LoadCertificateWithPrivateKey) (*LoadCertificateWithPrivateKeyResponse, error) {
	return service.LoadCertificateWithPrivateKeyContext(
		context.Background(),
		request,
	)
}

func (service *device) GetCertificateInformationContext(ctx context.Context, request *GetCertificateInformation) (*GetCertificateInformationResponse, error) {
	response := new(GetCertificateInformationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetCertificateInformation(request *GetCertificateInformation) (*GetCertificateInformationResponse, error) {
	return service.GetCertificateInformationContext(
		context.Background(),
		request,
	)
}

func (service *device) LoadCACertificatesContext(ctx context.Context, request *LoadCACertificates) (*LoadCACertificatesResponse, error) {
	response := new(LoadCACertificatesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) LoadCACertificates(request *LoadCACertificates) (*LoadCACertificatesResponse, error) {
	return service.LoadCACertificatesContext(
		context.Background(),
		request,
	)
}

func (service *device) CreateDot1XConfigurationContext(ctx context.Context, request *CreateDot1XConfiguration) (*CreateDot1XConfigurationResponse, error) {
	response := new(CreateDot1XConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) CreateDot1XConfiguration(request *CreateDot1XConfiguration) (*CreateDot1XConfigurationResponse, error) {
	return service.CreateDot1XConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) SetDot1XConfigurationContext(ctx context.Context, request *SetDot1XConfiguration) (*SetDot1XConfigurationResponse, error) {
	response := new(SetDot1XConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) SetDot1XConfiguration(request *SetDot1XConfiguration) (*SetDot1XConfigurationResponse, error) {
	return service.SetDot1XConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) GetDot1XConfigurationContext(ctx context.Context, request *GetDot1XConfiguration) (*GetDot1XConfigurationResponse, error) {
	response := new(GetDot1XConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetDot1XConfiguration(request *GetDot1XConfiguration) (*GetDot1XConfigurationResponse, error) {
	return service.GetDot1XConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *device) GetDot1XConfigurationsContext(ctx context.Context, request *GetDot1XConfigurations) (*GetDot1XConfigurationsResponse, error) {
	response := new(GetDot1XConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) GetDot1XConfigurations(request *GetDot1XConfigurations) (*GetDot1XConfigurationsResponse, error) {
	return service.GetDot1XConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *device) DeleteDot1XConfigurationContext(ctx context.Context, request *DeleteDot1XConfiguration) (*DeleteDot1XConfigurationResponse, error) {
	response := new(DeleteDot1XConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *device) DeleteDot1XConfiguration(request *DeleteDot1XConfiguration) (*DeleteDot1XConfigurationResponse, error) {
	return service.DeleteDot1XConfigurationContext(
		context.Background(),
		request,
	)
}
